{"version":3,"sources":["components/NFTContext/index.js","components/NFTContext/NFTContext.js","components/Navbar/SocialLinks/SocialLinks.js","components/Navbar/SocialLinks/index.js","components/Navbar/Logo/index.js","components/Navbar/Logo/Logo.js","components/Navbar/index.js","components/Navbar/Navbar.js","components/WalletAccount/index.js","components/WalletAccount/WalletAccount.js","components/Status/index.js","components/Status/Status.js","components/Mint/VendingMachine/index.js","components/Mint/VendingMachine/VendingMachine.js","components/Mint/index.js","components/Mint/Mint.js","components/Game/NFTPanel/NFTPanel.js","components/Game/NFTPanel/index.js","components/Game/index.js","components/Game/Game.js","App.js","index.js"],"names":["NFTContext","createContext","contractAddress","contractAbi","contract","abi","openseaColletionName","isRinkeby","parseEtherError","checkAndSwitchNetwork","price","setPrice","maxSupply","setMaxSupply","maxFreeSupply","setMaxFreeSupply","totalSupply","setTotalSupply","maxPerTxDuringMint","setMaxPerTxDuringMint","maxPerAddressDuringFreeMint","setMaxPerAddressDuringFreeMint","currPage","setCurrPage","currentAccount","statusMsg","updateStatus","SocialLink","props","image","useRef","className","onMouseEnter","current","src","process","iconHover","onMouseLeave","iconNormal","onClick","ref","alt","SocialLinks","useContext","links","window","open","connectWalletHandler","map","sl","key","Logo","Navbar","WalletAccount","input","len","length","substring","substr","Status","VendingMachine","useState","isBusy","setIsBusy","quantity","setQuantity","useEffect","loadMintInfo","ethereum","provider","ethers","providers","Web3Provider","signer","getSigner","nftContract","Contract","maxSupplyNum","toNumber","maxFreeSupplyNum","totalSupplyNum","maxPerTxDuringMintNum","maxPerAddressDuringFreeMintNum","cost","priceWei","utils","formatEther","errMsg","updateMintQuantity","quan","Math","min","max","updateTotalSupply","timerId","setInterval","clearInterval","mintOrBuy","mintNftHandler","alert","freeMint","nftTxn","mint","value","parseEther","toString","wait","hash","PageName","GAME","Mint","scrollIntoView","behavior","NFT","posX","setPosX","selectNft","metadata","hideNftPanel","draggable","onDragStart","e","clientX","dataTransfer","setDragImage","target","onDrag","scrollPanel","split","name","NFTPanel","container","deltaX","scrollLeft","onWheel","deltaY","mt","attr","dna","Game","setMetadata","currMetadata","setCurrMetadata","showNftPanel","setShowNftPanel","showNftPanelAnim","setShowNftPanelAnim","playing","setPlaying","loadNft","walletOfOwner","nfts","meta","bg","nftIdx","tokenURI","then","tokenMetadataURI","startsWith","fetch","response","json","tokenMetadata","push","catch","err","on","removeListener","openNftPanel","id","title","frameBorder","scrolling","crossOrigin","elem","document","getElementById","contentWindow","nftMetadata","JSON","stringify","startGame","MINT","selectedMetadata","newMetadata","Promise","r","setTimeout","msg","message","console","error","errs","match","replace","rinkeby","funcLog","Error","networkVersion","network","request","method","params","chainId","Number","App","setCurrentAccount","setStatusMsg","log","ctxValue","useMemo","useCallback","accounts","account","handleAccountChange","Provider","ReactDOM","createRoot","render","StrictMode"],"mappings":"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","file":"static/js/main.f3d9e97a.chunk.js","sourcesContent":["import { NFTContext } from './NFTContext';\n\nexport default NFTContext;\n","import { createContext } from 'react';\nimport contract from '../../contracts/RPG404.json';\n\nexport const NFTContext = createContext({\n  //! read only\n  contractAddress: '0xc21dCcA393Fe26D585db6598533b655816A87543',\n  contractAbi: contract.abi,\n  openseaColletionName: 'rpg-404',\n  isRinkeby: false,\n  //! utils, read only\n  parseEtherError: () => {},\n  checkAndSwitchNetwork: () => {},\n  //! load from contract\n  price: -1,\n  setPrice: () => {},\n  maxSupply: -1,\n  setMaxSupply: () => {},\n  maxFreeSupply: -1,\n  setMaxFreeSupply: () => {},\n  totalSupply: -1,\n  setTotalSupply: () => {},\n  maxPerTxDuringMint: -1,\n  setMaxPerTxDuringMint: () => {},\n  maxPerAddressDuringFreeMint: -1,\n  setMaxPerAddressDuringFreeMint: () => {},\n  //! current page\n  currPage: null,\n  setCurrPage: () => {},\n  //! wallet\n  currentAccount: null,\n  //! status\n  statusMsg: '',\n  updateStatus: () => {},\n});\n","import React, { useRef, useContext } from 'react';\nimport NFTContext from '../../NFTContext';\nimport './SocialLinks.css';\n\nconst SocialLink = (props) => {\n  const image = useRef();\n  return (\n    <div\n      className='social-icon'\n      onMouseEnter={() => {\n        image.current.src = process.env.PUBLIC_URL + props.iconHover;\n      }}\n      onMouseLeave={() => {\n        image.current.src = process.env.PUBLIC_URL + props.iconNormal;\n      }}\n      onClick={props.onClick}>\n      <img ref={image} className='social-icon-img' src={process.env.PUBLIC_URL + props.iconNormal} alt={props.alt} />\n    </div>\n  );\n};\n\nexport default function SocialLinks(props) {\n  const { contractAddress, openseaColletionName, isRinkeby } = useContext(NFTContext);\n\n  const links = [\n    {\n      ref: null,\n      iconNormal: '/img/social/icon_twitter.png',\n      iconHover: '/img/social/icon_twitter_hover.png',\n      alt: 'Twitter',\n      onClick: () => {\n        window.open('https://twitter.com/intent/follow?screen_name=rug_pull_games');\n      },\n    },\n    // {\n    //   ref: null,\n    //   iconNormal: '/img/social/icon_discord.png',\n    //   iconHover: '/img/social/icon_discord_hover.png',\n    //   alt: 'Discord',\n    //   onClick: () => {\n    //     window.open('https://discord.com/');\n    //   },\n    // },\n    {\n      ref: null,\n      iconNormal: '/img/social/icon_opensea.png',\n      iconHover: '/img/social/icon_opensea_hover.png',\n      alt: 'Opensea',\n      onClick: () => {\n        window.open(`https://${isRinkeby ? 'testnets.' : ''}opensea.io/collection/${openseaColletionName}`);\n      },\n    },\n    {\n      ref: null,\n      iconNormal: '/img/social/icon_etherscan.png',\n      iconHover: '/img/social/icon_etherscan_hover.png',\n      alt: 'Etherscan',\n      onClick: () => {\n        window.open(`https://${isRinkeby ? 'rinkeby.' : ''}etherscan.io/address/${contractAddress}`);\n      },\n    },\n    {\n      ref: null,\n      iconNormal: '/img/social/icon_metamask.png',\n      iconHover: '/img/social/icon_metamask_hover.png',\n      alt: 'MetaMask',\n      onClick: () => {\n        props.connectWalletHandler();\n      },\n    },\n  ];\n\n  return (\n    <div className='social-links'>\n      {links.map((sl) => {\n        return <SocialLink {...sl} key={`social-icon-${sl.alt}`} />;\n      })}\n    </div>\n  );\n}\n","import SocialLinks from './SocialLinks';\n\nexport default SocialLinks;\n","import Logo from './Logo';\n\nexport default Logo;\n","import React from 'react';\nimport './Logo.css';\n\nexport default function Logo() {\n  return (\n    <div className='logo'>\n      <img\n        className='logo-rpg-icon'\n        src={process.env.PUBLIC_URL + '/img/icon_rug_pull_games_logo_lg.png'}\n        alt='Twitter'\n        onClick={() => window.open('https://rug-pull.games', '_blank')}\n      />\n      <img className='logo-rpg-404-icon' src={process.env.PUBLIC_URL + '/img/icon_rpg_404.png'} alt='Discord' />\n    </div>\n  );\n}\n","import Navbar from './Navbar';\n\nexport default Navbar;\n","import React from \"react\";\nimport SocialLinks from \"./SocialLinks\";\nimport Logo from \"./Logo\";\nimport \"./Navbar.css\";\n\nexport default function Navbar(props) {\n  return (\n    <div className='navbar'>\n      <Logo />\n      <SocialLinks connectWalletHandler={props.connectWalletHandler} />\n    </div>\n  );\n}\n","import WalletAccount from './WalletAccount';\n\nexport default WalletAccount;\n","import { useContext } from 'react';\nimport NFTContext from '../NFTContext';\nimport './WalletAccount.css';\n\nconst truncate = (input, len) =>\n  input.length >= len * 2 + 2 ? `${input.substring(0, len + 2)}...${input.substr(input.length - len)}` : input;\n\nexport default function WalletAccount() {\n  const { currentAccount } = useContext(NFTContext);\n  return <div className='wallet-acc'>{currentAccount ? truncate(currentAccount, 4) : ''}</div>;\n}\n","import Status from './Status';\n\nexport default Status;\n","import React from 'react';\nimport './Status.css';\n\nexport default function Status(props) {\n  return <div className='status'>{props.statusMsg}</div>;\n}\n","import VendingMachine from './VendingMachine';\n\nexport default VendingMachine;\n","import React, { useEffect, useState, useContext } from \"react\";\nimport { ethers } from \"ethers\";\nimport NFTContext from \"../../NFTContext\";\nimport { PageName } from \"../../../App\";\nimport \"./VendingMachine.css\";\n\nexport default function VendingMachine(props) {\n  //! is busy\n  const [isBusy, setIsBusy] = useState(false);\n\n  //! quantity\n  const MIN_QUALITY = 1;\n  const [quantity, setQuantity] = useState(MIN_QUALITY);\n\n  //! web3 APIs\n  const {\n    //! read only\n    contractAddress,\n    contractAbi,\n    openseaColletionName,\n    isRinkeby,\n    //! utils\n    parseEtherError,\n    checkAndSwitchNetwork,\n    //! load from contract\n    price,\n    setPrice,\n    maxSupply,\n    setMaxSupply,\n    maxFreeSupply,\n    setMaxFreeSupply,\n    totalSupply,\n    setTotalSupply,\n    maxPerTxDuringMint,\n    setMaxPerTxDuringMint,\n    maxPerAddressDuringFreeMint,\n    setMaxPerAddressDuringFreeMint,\n    //! current page\n    setCurrPage,\n    //! wallet\n    currentAccount,\n    //! status\n    updateStatus,\n  } = useContext(NFTContext);\n\n  useEffect(() => {\n    const loadMintInfo = async () => {\n      const { ethereum } = window;\n      if (!ethereum) {\n        updateStatus(\"Please install MetaMask.\");\n        return;\n      }\n\n      if (currentAccount === null) {\n        updateStatus(\"Please connect wallet first\");\n        props.connectWalletHandler();\n        return;\n      }\n\n      updateStatus(contractAddress);\n      if (!contractAddress || contractAddress === \"\") {\n        updateStatus(\"Contract is not available\");\n        return;\n      }\n\n      try {\n        const provider = new ethers.providers.Web3Provider(ethereum);\n        const signer = provider.getSigner();\n        const nftContract = new ethers.Contract(contractAddress, contractAbi, signer);\n\n        updateStatus(\"Loading mint contract info...\");\n\n        let maxSupplyNum = await nftContract.maxSupply();\n        setMaxSupply(maxSupplyNum.toNumber());\n        let maxFreeSupplyNum = await nftContract.maxFreeSupply();\n        setMaxFreeSupply(maxFreeSupplyNum.toNumber());\n        let totalSupplyNum = await nftContract.totalSupply();\n        setTotalSupply(totalSupplyNum.toNumber());\n        let maxPerTxDuringMintNum = await nftContract.maxPerTxDuringMint();\n        setMaxPerTxDuringMint(maxPerTxDuringMintNum.toNumber());\n        let maxPerAddressDuringFreeMintNum = await nftContract.maxPerAddressDuringFreeMint();\n        setMaxPerAddressDuringFreeMint(maxPerAddressDuringFreeMintNum.toNumber());\n\n        //* mint price\n        if (totalSupply < maxFreeSupply) {\n          //* free mint\n          setPrice(0);\n        } else {\n          //* public sales\n          let priceWei = await nftContract.cost();\n          setPrice(ethers.utils.formatEther(priceWei));\n        }\n\n        updateStatus(\"Mint contract info loaded\");\n      } catch (err) {\n        const errMsg = parseEtherError(err);\n        updateStatus(errMsg);\n      }\n    };\n\n    loadMintInfo();\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [currentAccount]);\n\n  //! mint quantity\n  const add = () => {\n    updateMintQuantity(quantity + 1);\n  };\n\n  const sub = () => {\n    updateMintQuantity(quantity - 1);\n  };\n\n  const updateMintQuantity = (quan) => {\n    if (quan && price > -1) {\n      if (totalSupply < maxFreeSupply) {\n        //* free mint\n        quan = Math.min(maxPerAddressDuringFreeMint, Math.max(MIN_QUALITY, quan));\n      } else {\n        //* public sales\n        quan = Math.min(maxPerTxDuringMint, Math.max(MIN_QUALITY, quan));\n      }\n      setQuantity(quan);\n    }\n  };\n\n  //! total supply\n  useEffect(() => {\n    const updateTotalSupply = async () => {\n      const { ethereum } = window;\n      if (!ethereum) {\n        updateStatus(\"Please install MetaMask.\");\n        return;\n      }\n      if (currentAccount === null) {\n        return;\n      }\n      if (!contractAddress || contractAddress === \"\") {\n        return;\n      }\n      try {\n        //* check network\n        await checkAndSwitchNetwork(isRinkeby, updateStatus);\n\n        const provider = new ethers.providers.Web3Provider(ethereum);\n        const signer = provider.getSigner();\n        const nftContract = new ethers.Contract(contractAddress, contractAbi, signer);\n\n        let totalSupplyNum = await nftContract.totalSupply();\n        setTotalSupply(totalSupplyNum.toNumber());\n\n        //* mint price\n        if (totalSupply < maxFreeSupply) {\n          setPrice(0);\n        } else {\n          let priceWei = await nftContract.cost();\n          setPrice(ethers.utils.formatEther(priceWei));\n        }\n      } catch (err) {\n        const errMsg = parseEtherError(err);\n        updateStatus(errMsg);\n      }\n    };\n\n    const timerId = setInterval(() => {\n      updateTotalSupply();\n    }, 500);\n\n    return () => clearInterval(timerId);\n  });\n\n  //! mint NFTs\n  const mintNftHandler = async () => {\n    if (totalSupply >= maxSupply) {\n      alert(\n        `Thank you for your interest. \\nGohan-kun is sold out. \\nPlease check https://opensea.io/collection/gohan-kun.`\n      );\n      window.open(`https://${isRinkeby ? \"testnets.\" : \"\"}opensea.io/collection/${openseaColletionName}`);\n      return;\n    }\n\n    const { ethereum } = window;\n    if (!ethereum) {\n      updateStatus(\"Please install MetaMask.\");\n      return;\n    }\n    if (currentAccount === null) {\n      updateStatus(\"Please connect wallet first\");\n      props.connectWalletHandler();\n      return;\n    }\n    if (isBusy) {\n      updateStatus(\"Busy... please wait\");\n      return;\n    }\n    if (!contractAddress || contractAddress === \"\") {\n      updateStatus(\"Contract is not available\");\n      return;\n    }\n    if (price < -1) {\n      updateStatus(\"Load contract info first\");\n      return;\n    }\n    try {\n      //* check network\n      await checkAndSwitchNetwork(isRinkeby, updateStatus);\n\n      const provider = new ethers.providers.Web3Provider(ethereum);\n      const signer = provider.getSigner();\n      const nftContract = new ethers.Contract(contractAddress, contractAbi, signer);\n\n      updateStatus(\"Initialize minting...\");\n      setIsBusy(true);\n\n      let nftTxn;\n      if (totalSupply < maxFreeSupply) {\n        //* free mint\n        nftTxn = await nftContract.freeMint(quantity);\n      } else {\n        //* public sales\n        nftTxn = await nftContract.mint(quantity, {\n          value: ethers.utils.parseEther((price * quantity).toString()),\n        });\n      }\n\n      updateStatus(`Mint (price: ${price}, quantity: ${quantity})... please wait`);\n\n      await nftTxn.wait();\n\n      updateStatus(`Mined, see transction: https://${isRinkeby ? \"rinkeby.\" : \"\"}etherscan.io/tx/${nftTxn.hash}`);\n      setIsBusy(false);\n    } catch (err) {\n      const errMsg = parseEtherError(err);\n      updateStatus(errMsg);\n      setIsBusy(false);\n    }\n  };\n\n  //! mint or buy\n  let mintOrBuy;\n  if (totalSupply !== -1 && totalSupply < maxSupply) {\n    //* mint directly\n    mintOrBuy = (\n      <div className='vending-mint'>\n        <img\n          className='vending-btn-add'\n          src={process.env.PUBLIC_URL + \"/img/btn_mint_add.png\"}\n          alt='Button of Increasing Mint Quantity'\n          onClick={add}\n        />\n        <img\n          className='vending-btn-sub'\n          src={process.env.PUBLIC_URL + \"/img/btn_mint_sub.png\"}\n          alt='Button of Decreasing Mint Quantity'\n          onClick={sub}\n        />\n        <img\n          className='vending-bg-input-frame'\n          src={process.env.PUBLIC_URL + \"/img/bg_mint_input_frame.png\"}\n          alt='Mint Quantity Input Frame'\n        />\n        <img\n          className='vending-btn-mint'\n          src={process.env.PUBLIC_URL + \"/img/btn_mint.png\"}\n          alt='Mint Quantity Input Frame'\n          onClick={mintNftHandler}\n        />\n        <div className='vending-price'>{price > 0 ? `Price: ${price} eth` : price === 0 ? \"Price: Free\" : \"\"}</div>\n        <div className='vending-supply'>\n          {price > -1 ? `Mint#: ${totalSupply} / ${totalSupply < maxFreeSupply ? maxFreeSupply : maxSupply}` : \"\"}\n        </div>\n        <div className='vending-quantity'>{price > -1 ? quantity : \"???\"}</div>\n      </div>\n    );\n  } else {\n    //* buy on opensea\n    mintOrBuy = (\n      <img\n        className='vending-btn-opensea'\n        src={process.env.PUBLIC_URL + \"/img/btn_mint_opensea.png\"}\n        alt='Buy NFTs on Opensea'\n        onClick={() => {\n          window.open(`https://${isRinkeby ? \"testnets.\" : \"\"}opensea.io/collection/${openseaColletionName}`);\n        }}\n      />\n    );\n  }\n\n  return (\n    <div className='vending-machine'>\n      <img\n        className='vending-bg'\n        src={process.env.PUBLIC_URL + \"/img/bg_vending_machine.png\"}\n        alt='Vending Machine Background'\n      />\n      <img\n        className='vending-btn-to-game'\n        src={process.env.PUBLIC_URL + \"/img/btn_mint_to_game.png\"}\n        alt='Button of Vending Machine to Game'\n        onClick={() => setCurrPage(PageName.GAME)}\n      />\n      {mintOrBuy}\n    </div>\n  );\n}\n","import Mint from './Mint';\n\nexport default Mint;\n","import { useRef } from \"react\";\nimport \"./Mint.css\";\nimport VendingMachine from \"./VendingMachine\";\n\nexport default function Mint(props) {\n  const ref = useRef(null);\n\n  const handleClick = () => {\n    ref.current?.scrollIntoView({ behavior: \"smooth\" });\n  };\n\n  return (\n    <div className='mint'>\n      <img\n        className='mint-market-bg'\n        src={process.env.PUBLIC_URL + \"/img/bg_mint_market.png\"}\n        alt='Mint Market Background'\n        onClick={handleClick}\n      />\n      <div ref={ref}>\n        <VendingMachine {...props.connectWalletHandler} />\n      </div>\n    </div>\n  );\n}\n","import React, { useState, useRef } from \"react\";\nimport \"./NFTPanel.css\";\n\nexport const NFT = (props) => {\n  const [posX, setPosX] = useState(null);\n  const selectNft = () => {\n    props.selectNft(props.metadata);\n    props.hideNftPanel();\n  };\n\n  const dragStartHandler = (e) => {\n    setPosX(e.clientX);\n    e.dataTransfer.setDragImage(e.target, 100000, 0);\n  };\n\n  const dragHandler = (e) => {\n    if (e.clientX > 0) {\n      props.scrollPanel(posX - e.clientX);\n      setPosX(e.clientX);\n    }\n    e.dataTransfer.setDragImage(e.target, 100000, 0);\n  };\n\n  return (\n    <div className='nft-item' onClick={selectNft} draggable='true' onDragStart={dragStartHandler} onDrag={dragHandler}>\n      <img\n        className='nft-item-loading'\n        src={process.env.PUBLIC_URL + \"/img/placehold_nft_loading.png\"}\n        alt='NFT Loading'\n      />\n      <img\n        className='nft-image'\n        src={`https://rpg.mypinata.cloud/ipfs/${props.metadata.image.split(\"ipfs://\")[1]}`}\n        alt={props.metadata.name}\n      />\n    </div>\n  );\n};\n\nexport default function NFTPanel(props) {\n  const container = useRef();\n  const onScrollHandler = (e) => {\n    if (e.deltaY > 0) {\n      scrollPanel(30);\n    }\n    if (e.deltaY < 0) {\n      scrollPanel(-30);\n    }\n  };\n\n  const scrollPanel = (deltaX) => {\n    container.current.scrollLeft += deltaX;\n  };\n\n  return (\n    <div className='nft-panel'>\n      <div className='nft-container' ref={container} onWheel={onScrollHandler}>\n        {props.metadata.map((mt) => {\n          const attr = {\n            metadata: mt,\n            selectNft: props.selectNft,\n            hideNftPanel: props.hideNftPanel,\n            scrollPanel,\n          };\n          return <NFT {...attr} key={`nft-metadata-${mt.dna}`} />;\n        })}\n      </div>\n    </div>\n  );\n}\n","import NFTPanel from './NFTPanel';\n\nexport default NFTPanel;\n","import Game from './Game';\n\nexport default Game;\n","import React, { useState, useEffect, useContext } from \"react\";\nimport { ethers } from \"ethers\";\nimport NFTContext from \"../NFTContext\";\nimport NFTPanel from \"./NFTPanel\";\nimport { PageName } from \"../../App\";\nimport \"./Game.css\";\n\nexport default function Game(props) {\n  const [metadata, setMetadata] = useState([]);\n  const [currMetadata, setCurrMetadata] = useState({});\n  const [showNftPanel, setShowNftPanel] = useState(false);\n  const [showNftPanelAnim, setShowNftPanelAnim] = useState(\"open\");\n  const [playing, setPlaying] = useState(false);\n\n  //! web3 API in NFTContext\n  const {\n    currentAccount,\n    contractAddress,\n    contractAbi,\n    parseEtherError,\n    checkAndSwitchNetwork,\n    isRinkeby,\n    updateStatus,\n    setCurrPage,\n  } = useContext(NFTContext);\n\n  //! load NFTs\n  const loadNft = async () => {\n    const { ethereum } = window;\n    if (!ethereum) {\n      updateStatus(\"Please install MetaMask.\");\n      return;\n    }\n    try {\n      //* check network\n      await checkAndSwitchNetwork(isRinkeby, updateStatus);\n\n      if (currentAccount === null) {\n        updateStatus(\"Please connect wallet first\");\n        props.connectWalletHandler();\n        return;\n      }\n\n      updateStatus(contractAddress);\n      if (!contractAddress || contractAddress === \"\") {\n        updateStatus(\"Contract is not available\");\n        return;\n      }\n\n      // clean metadata\n      setCurrMetadata({});\n\n      const provider = new ethers.providers.Web3Provider(ethereum);\n      const signer = provider.getSigner();\n      const nftContract = new ethers.Contract(contractAddress, contractAbi, signer);\n\n      updateStatus(\"Loading NFTs from blockchain...\");\n\n      let nfts = await nftContract.walletOfOwner(currentAccount);\n\n      const meta = [];\n      if (nfts.length > 0) {\n        //* show selected switch nft\n        updateStatus(`You have ${nfts.length} ${nfts.length > 1 ? \"NFTs\" : \"NFT\"}. Loading metadata...`);\n        for (const bg of nfts) {\n          const nftIdx = bg.toNumber();\n          nftContract.tokenURI(nftIdx).then((tokenMetadataURI) => {\n            if (tokenMetadataURI.startsWith(\"ipfs://\")) {\n              tokenMetadataURI = `https://rpg.mypinata.cloud/ipfs/${tokenMetadataURI.split(\"ipfs://\")[1]}`;\n            }\n            // console.log(tokenMetadataURI);\n            fetch(tokenMetadataURI)\n              .then((response) => response.json())\n              .then((tokenMetadata) => {\n                // console.log(tokenMetadata);\n                meta.push(tokenMetadata);\n                setMetadata([...meta]);\n                updateStatus(\n                  `You have ${nfts.length} ${nfts.length > 1 ? \"NFTs\" : \"NFT\"}. ${meta.length} / ${\n                    nfts.length\n                  } loaded. ${metadata.length === nfts.length ? \"Select your favor NFT and play.\" : \"\"}`\n                );\n              })\n              .catch((err) => {\n                const errMsg = parseEtherError(err);\n                updateStatus(errMsg);\n              });\n          });\n        }\n      } else {\n        //* you don't have any RPG404 nfts, please mint or buy on opensea.io\n        updateStatus(`You don't have any RPG404 NFTs. Please mint or buy on opensea.io`);\n      }\n    } catch (err) {\n      const errMsg = parseEtherError(err);\n      updateStatus(errMsg);\n    }\n  };\n\n  //! load NFTs effect\n  useEffect(() => {\n    const { ethereum } = window;\n    if (!ethereum) {\n      return;\n    }\n\n    loadNft();\n    ethereum.on(\"accountsChanged\", loadNft);\n    return () => {\n      ethereum?.removeListener(\"accountsChanged\", loadNft);\n    };\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [currentAccount]);\n\n  //! select NFT\n  const selectNft = (selectedMetadata) => {\n    if (selectedMetadata) {\n      const newMetadata = selectedMetadata;\n      setCurrMetadata({ ...newMetadata });\n      updateStatus(`Selected NFT: ${newMetadata.name}`);\n    }\n  };\n\n  //! open NFT panel\n  const openNftPanel = () => {\n    if (currentAccount) {\n      if (metadata.length > 0) {\n        setShowNftPanelAnim(\"open\");\n        setShowNftPanel(true);\n      } else {\n        updateStatus(\"No NFT loaded\");\n        loadNft();\n      }\n    } else {\n      updateStatus(\"Please connect wallet first\");\n      props.connectWalletHandler();\n    }\n  };\n\n  //! play game\n  const playGame = () => {\n    if (currentAccount) {\n      if (metadata.length > 0) {\n        if (currMetadata.name) {\n          //* Play Game!!\n          const elem = document.getElementById(\"godot-game\");\n          if (elem) {\n            elem.contentWindow.nftMetadata = { ...currMetadata };\n            window.nftMetadata = JSON.stringify(currMetadata);\n            setPlaying(true);\n            elem.contentWindow.startGame();\n            updateStatus(\"Game start, enjoy!\");\n          } else {\n            setPlaying(false);\n            updateStatus(\"Cannot find game :-(\");\n          }\n        } else {\n          updateStatus(\"Please select your favor NFT before playing\");\n          openNftPanel();\n        }\n      } else {\n        updateStatus(\"No NFT loaded\");\n        loadNft();\n      }\n    } else {\n      updateStatus(\"Please connect wallet first\");\n      props.connectWalletHandler();\n    }\n  };\n\n  return (\n    <div className='game'>\n      <img className='game-bg' src={process.env.PUBLIC_URL + \"/img/game_bg.png\"} alt='Game Background' />\n      <iframe\n        id='godot-game'\n        className='game-iframe'\n        title='RPG 404'\n        src={process.env.PUBLIC_URL + \"/game/game.html\"}\n        frameBorder='0'\n        scrolling='no'\n        crossOrigin='anonymous'\n      />\n      {!playing && (\n        <div className='game-cover'>\n          <img className='game-cover-img' src={process.env.PUBLIC_URL + \"/img/game_cover.png\"} alt='Game Cover' />\n          {!showNftPanel && (\n            <img\n              className={`btn-game-play ${currentAccount ? \"btn-clickable\" : \"btn-unclickable\"}`}\n              src={process.env.PUBLIC_URL + \"/img/btn_game_play.png\"}\n              alt='Play Game Button'\n              onClick={playGame}\n            />\n          )}\n          {!showNftPanel && (\n            <img\n              className={`btn-select-nft ${currentAccount ? \"btn-clickable\" : \"btn-unclickable\"}`}\n              src={process.env.PUBLIC_URL + \"/img/btn_game_select_nft.png\"}\n              alt='Select NFT Button'\n              onClick={openNftPanel}\n            />\n          )}\n        </div>\n      )}\n      <img\n        className='btn-game-to-mint'\n        src={process.env.PUBLIC_URL + \"/img/btn_game_to_mint.png\"}\n        alt='Mint Button'\n        onClick={() => setCurrPage(PageName.MINT)}\n      />\n      {showNftPanel ? (\n        <div className={showNftPanelAnim}>\n          <NFTPanel\n            metadata={metadata}\n            selectNft={selectNft}\n            hideNftPanel={async () => {\n              setShowNftPanelAnim(\"close\");\n              await new Promise((r) => setTimeout(r, 200));\n              setShowNftPanel(false);\n            }}\n          />\n        </div>\n      ) : null}\n    </div>\n  );\n}\n","import { useState, useEffect, useContext, useMemo, useCallback } from \"react\";\nimport Navbar from \"./components/Navbar\";\nimport WalletAccount from \"./components/WalletAccount\";\nimport Status from \"./components/Status\";\nimport Mint from \"./components/Mint\";\nimport Game from \"./components/Game\";\nimport NFTContext from \"./components/NFTContext\";\nimport \"./App.css\";\n\n//! as Enum\nexport const PageName = {\n  GAME: \"game\",\n  MINT: \"mint\",\n};\n\n//! utils\n\n// parse error from MetaMask\nconst parseEtherError = (err) => {\n  let msg = \"error\";\n  if (err && err.message) {\n    console.error(err.message);\n    const errs = err.message.match(/(?:\"message\":)\".*?\"/g);\n    if (errs && errs.length > 0 && errs[0] !== \"\") {\n      msg = errs[0].replace(`\"message\":`, \"\");\n    } else {\n      msg = err.message;\n    }\n  }\n  return msg;\n};\n\n// check network\nconst checkAndSwitchNetwork = async (rinkeby, funcLog) => {\n  const { ethereum } = window;\n  if (!ethereum) {\n    throw new Error(\"Please install MetaMask.\");\n  }\n  const network = await ethereum.networkVersion;\n  if (rinkeby && network !== \"4\") {\n    //* testnet rinkeby\n    funcLog(`Please change network to Rinkeby`);\n    await ethereum.request({\n      method: \"wallet_switchEthereumChain\",\n      params: [{ chainId: `0x${Number(4).toString(16)}` }],\n    });\n  }\n  if (!rinkeby && network !== \"1\") {\n    //* main network\n    funcLog(`Please change network to ethereum Mainnet`);\n    await ethereum.request({\n      method: \"wallet_switchEthereumChain\",\n      params: [{ chainId: `0x${Number(1).toString(16)}` }],\n    });\n  }\n};\n\nfunction App() {\n  //! read only\n  const { contractAddress, contractAbi, openseaColletionName, isRinkeby } = useContext(NFTContext);\n  //! load from contract\n  const [price, setPrice] = useState(0);\n  const [maxSupply, setMaxSupply] = useState(0);\n  const [totalSupply, setTotalSupply] = useState(0);\n  const [maxFreeSupply, setMaxFreeSupply] = useState(0);\n  const [maxPerTxDuringMint, setMaxPerTxDuringMint] = useState(0);\n  const [maxPerAddressDuringFreeMint, setMaxPerAddressDuringFreeMint] = useState(0);\n  //! page\n  const [currPage, setCurrPage] = useState(PageName.GAME);\n  //! wallet\n  const [currentAccount, setCurrentAccount] = useState(null);\n  //! status\n  const [statusMsg, setStatusMsg] = useState(\"\");\n\n  const updateStatus = (msg) => {\n    console.log(msg);\n    setStatusMsg(`Status: ${msg}`);\n  };\n\n  const ctxValue = useMemo(\n    () => ({\n      //! read only\n      contractAddress,\n      contractAbi,\n      openseaColletionName,\n      isRinkeby,\n      //! utils\n      parseEtherError,\n      checkAndSwitchNetwork,\n      //! load from contract\n      price,\n      setPrice,\n      maxSupply,\n      setMaxSupply,\n      maxFreeSupply,\n      setMaxFreeSupply,\n      totalSupply,\n      setTotalSupply,\n      maxPerTxDuringMint,\n      setMaxPerTxDuringMint,\n      maxPerAddressDuringFreeMint,\n      setMaxPerAddressDuringFreeMint,\n      //! current page\n      currPage,\n      setCurrPage,\n      //! wallet\n      currentAccount,\n      //! status\n      statusMsg,\n      updateStatus,\n    }),\n    [\n      contractAbi,\n      contractAddress,\n      currPage,\n      currentAccount,\n      isRinkeby,\n      maxFreeSupply,\n      maxPerAddressDuringFreeMint,\n      maxPerTxDuringMint,\n      maxSupply,\n      openseaColletionName,\n      price,\n      statusMsg,\n      totalSupply,\n    ]\n  );\n\n  const connectWalletHandler = useCallback(async () => {\n    const { ethereum } = window;\n    if (!ethereum) {\n      alert(\"Please install MetaMask.\");\n      return;\n    }\n\n    try {\n      //* check network\n      await checkAndSwitchNetwork(isRinkeby, updateStatus);\n\n      //* accouts\n      if (currentAccount) {\n        return;\n      }\n      const accounts = await ethereum.request({ method: \"eth_requestAccounts\" });\n      if (accounts.length !== 0) {\n        const account = accounts[0];\n        setCurrentAccount(account);\n        updateStatus(`Connected (address: ${account})`);\n      } else {\n        updateStatus(\"No authorized account found\");\n      }\n    } catch (err) {\n      const errMsg = parseEtherError(err);\n      updateStatus(errMsg);\n    }\n  }, [currentAccount, isRinkeby]);\n\n  useEffect(() => {\n    const { ethereum } = window;\n    if (!ethereum) {\n      return;\n    }\n    const handleAccountChange = (...args) => {\n      const accounts = args[0];\n      if (accounts.length === 0) {\n        updateStatus(\"No authorized account found\");\n      } else if (accounts[0] !== currentAccount) {\n        const account = accounts[0];\n        setCurrentAccount(account);\n        updateStatus(`Connected (address: ${account})`);\n      }\n    };\n    ethereum.on(\"accountsChanged\", handleAccountChange);\n    return () => {\n      ethereum?.removeListener(\"accountsChanged\", handleAccountChange);\n    };\n  });\n\n  useEffect(() => {\n    const connectWallet = () => {\n      connectWalletHandler();\n    };\n    connectWallet();\n  }, [connectWalletHandler]);\n\n  //! reture\n  return (\n    <NFTContext.Provider value={ctxValue}>\n      <div className='App'>\n        <Navbar {...{ connectWalletHandler }} />\n        {currPage === PageName.GAME && <Game {...{ connectWalletHandler }} />}\n        {currPage === PageName.MINT && <Mint {...{ connectWalletHandler }} />}\n        <WalletAccount />\n        <Status statusMsg={statusMsg} />\n      </div>\n    </NFTContext.Provider>\n  );\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom/client';\nimport './index.css';\nimport App from './App';\n\nconst root = ReactDOM.createRoot(document.getElementById('root'));\nroot.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>\n);\n"],"sourceRoot":""}