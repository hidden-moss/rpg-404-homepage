{"version":3,"sources":["components/NFTContext/index.js","components/NFTContext/NFTContext.js","components/Navbar/SocialLinks/SocialLinks.js","components/Navbar/SocialLinks/index.js","components/Navbar/Logo/index.js","components/Navbar/Logo/Logo.js","components/Navbar/index.js","components/Navbar/Navbar.js","components/WalletAccount/WalletAccount.js","components/WalletAccount/index.js","components/Status/index.js","components/Status/Status.js","components/Mint/VendingMachine/index.js","components/Mint/VendingMachine/VendingMachine.js","components/Mint/index.js","components/Mint/Mint.js","components/Game/NFTPanel/NFTPanel.js","components/Game/NFTPanel/index.js","components/Game/index.js","components/Game/Game.js","utils/utils.js","web3/web3provider.js","web3/networks.js","App.js","index.js"],"names":["NFTContext","createContext","contractAddress","contractAbi","contract","abi","openseaColletionName","isTestnet","parseEtherError","price","setPrice","maxSupply","setMaxSupply","maxFreeSupply","setMaxFreeSupply","totalSupply","setTotalSupply","maxPerTxDuringMint","setMaxPerTxDuringMint","maxPerAddressDuringFreeMint","setMaxPerAddressDuringFreeMint","currPage","setCurrPage","provider","library","chainId","account","checkAndSwitchNetwork","statusMsg","updateStatus","SocialLink","props","image","useRef","className","onMouseEnter","current","src","process","iconHover","onMouseLeave","iconNormal","onClick","ref","alt","SocialLinks","useContext","links","window","open","connectWallet","map","sl","key","Logo","Navbar","ethers","providers","JsonRpcProvider","truncate","input","len","length","substring","substr","WalletAccount","useState","names","setNames","getName","addr","console","log","resolvedName","lookupAddress","prev","useENS","name","setName","useEffect","showAccount","nameOrAddress","startsWith","Status","VendingMachine","isBusy","setIsBusy","quantity","setQuantity","loadMintInfo","ethereum","Web3Provider","signer","getSigner","nftContract","Contract","maxSupplyNum","toNumber","maxFreeSupplyNum","totalSupplyNum","maxPerTxDuringMintNum","maxPerAddressDuringFreeMintNum","cost","priceWei","utils","formatEther","errMsg","updateMintQuantity","quan","Math","min","max","updateTotalSupply","timerId","setInterval","clearInterval","mintOrBuy","mintNftHandler","alert","freeMint","nftTxn","mint","value","parseEther","toString","wait","hash","PageName","GAME","Mint","scrollIntoView","behavior","NFT","posX","setPosX","selectNft","metadata","hideNftPanel","draggable","onDragStart","e","clientX","dataTransfer","setDragImage","target","onDrag","scrollPanel","split","NFTPanel","container","deltaX","scrollLeft","onWheel","deltaY","mt","attr","dna","Game","setMetadata","currMetadata","setCurrMetadata","showNftPanel","setShowNftPanel","showNftPanelAnim","setShowNftPanelAnim","playing","setPlaying","loadNft","walletOfOwner","nfts","meta","bg","nftIdx","tokenURI","then","tokenMetadataURI","fetch","response","json","tokenMetadata","push","catch","err","on","removeListener","openNftPanel","id","title","frameBorder","scrolling","crossOrigin","elem","document","getElementById","contentWindow","nftMetadata","JSON","stringify","startGame","MINT","selectedMetadata","newMetadata","Promise","r","setTimeout","toHex","num","Number","msg","message","error","errs","match","replace","providerOptions","walletlink","package","CoinbaseWalletSDK","options","appName","infuraId","walletconnect","WalletConnect","web3Modal","Web3Modal","theme","disableInjectedProvider","networkConfig","rpcUrls","chainName","nativeCurrency","decimals","symbol","blockExplorerUrls","iconUrls","blockExplorerUrl","App","setProvider","setLibrary","setChainId","setAccount","setStatusMsg","useCallback","connect","listAccounts","accounts","getNetwork","network","toggleModal","switchNetwork","request","method","params","code","testnet","funcLog","Error","disconnect","clearCachedProvider","handleAccountsChanged","handleChainChanged","_hexChainId","handleDisconnect","ctxValue","useMemo","Provider","ReactDOM","createRoot","render","StrictMode"],"mappings":"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","file":"static/js/main.4b12bc38.chunk.js","sourcesContent":["import { NFTContext } from './NFTContext';\n\nexport default NFTContext;\n","import { createContext } from \"react\";\nimport contract from \"../../contracts/RPG404.json\";\n\nexport const NFTContext = createContext({\n  //! read only\n  contractAddress: \"0xc21dCcA393Fe26D585db6598533b655816A87543\",\n  contractAbi: contract.abi,\n  openseaColletionName: \"rpg-404\",\n  isTestnet: false,\n  //! utils, read only\n  parseEtherError: () => {},\n  //! load from contract\n  price: -1,\n  setPrice: () => {},\n  maxSupply: -1,\n  setMaxSupply: () => {},\n  maxFreeSupply: -1,\n  setMaxFreeSupply: () => {},\n  totalSupply: -1,\n  setTotalSupply: () => {},\n  maxPerTxDuringMint: -1,\n  setMaxPerTxDuringMint: () => {},\n  maxPerAddressDuringFreeMint: -1,\n  setMaxPerAddressDuringFreeMint: () => {},\n  //! current page\n  currPage: null,\n  setCurrPage: () => {},\n  //! wallet\n  provider: null,\n  library: null,\n  chainId: null,\n  account: null,\n  checkAndSwitchNetwork: () => {},\n  //! status\n  statusMsg: \"\",\n  updateStatus: () => {},\n});\n","import React, { useRef, useContext } from 'react';\nimport NFTContext from '../../NFTContext';\nimport './SocialLinks.css';\n\nconst SocialLink = (props) => {\n  const image = useRef();\n  return (\n    <div\n      className='social-icon'\n      onMouseEnter={() => {\n        image.current.src = process.env.PUBLIC_URL + props.iconHover;\n      }}\n      onMouseLeave={() => {\n        image.current.src = process.env.PUBLIC_URL + props.iconNormal;\n      }}\n      onClick={props.onClick}>\n      <img ref={image} className='social-icon-img' src={process.env.PUBLIC_URL + props.iconNormal} alt={props.alt} />\n    </div>\n  );\n};\n\nexport default function SocialLinks(props) {\n  const { contractAddress, openseaColletionName, isTestnet } = useContext(NFTContext);\n\n  const links = [\n    {\n      ref: null,\n      iconNormal: '/img/social/icon_twitter.png',\n      iconHover: '/img/social/icon_twitter_hover.png',\n      alt: 'Twitter',\n      onClick: () => {\n        window.open('https://twitter.com/intent/follow?screen_name=rug_pull_games');\n      },\n    },\n    // {\n    //   ref: null,\n    //   iconNormal: '/img/social/icon_discord.png',\n    //   iconHover: '/img/social/icon_discord_hover.png',\n    //   alt: 'Discord',\n    //   onClick: () => {\n    //     window.open('https://discord.com/');\n    //   },\n    // },\n    {\n      ref: null,\n      iconNormal: '/img/social/icon_opensea.png',\n      iconHover: '/img/social/icon_opensea_hover.png',\n      alt: 'Opensea',\n      onClick: () => {\n        window.open(`https://${isTestnet ? 'testnets.' : ''}opensea.io/collection/${openseaColletionName}`);\n      },\n    },\n    {\n      ref: null,\n      iconNormal: '/img/social/icon_etherscan.png',\n      iconHover: '/img/social/icon_etherscan_hover.png',\n      alt: 'Etherscan',\n      onClick: () => {\n        window.open(`https://${isTestnet ? 'rinkeby.' : ''}etherscan.io/address/${contractAddress}`);\n      },\n    },\n    {\n      ref: null,\n      iconNormal: '/img/social/icon_metamask.png',\n      iconHover: '/img/social/icon_metamask_hover.png',\n      alt: 'MetaMask',\n      onClick: () => {\n        props.connectWallet();\n      },\n    },\n  ];\n\n  return (\n    <div className='social-links'>\n      {links.map((sl) => {\n        return <SocialLink {...sl} key={`social-icon-${sl.alt}`} />;\n      })}\n    </div>\n  );\n}\n","import SocialLinks from './SocialLinks';\n\nexport default SocialLinks;\n","import Logo from './Logo';\n\nexport default Logo;\n","import React from 'react';\nimport './Logo.css';\n\nexport default function Logo() {\n  return (\n    <div className='logo'>\n      <img\n        className='logo-rpg-icon'\n        src={process.env.PUBLIC_URL + '/img/icon_rug_pull_games_logo_lg.png'}\n        alt='Twitter'\n        onClick={() => window.open('https://rug-pull.games', '_blank')}\n      />\n      <img className='logo-rpg-404-icon' src={process.env.PUBLIC_URL + '/img/icon_rpg_404.png'} alt='Discord' />\n    </div>\n  );\n}\n","import Navbar from './Navbar';\n\nexport default Navbar;\n","import React from \"react\";\nimport SocialLinks from \"./SocialLinks\";\nimport Logo from \"./Logo\";\nimport \"./Navbar.css\";\n\nexport default function Navbar(props) {\n  return (\n    <div className='navbar'>\n      <Logo />\n      <SocialLinks connectWallet={props.connectWallet} />\n    </div>\n  );\n}\n","import { useContext, useEffect, useState } from \"react\";\nimport { ethers } from \"ethers\";\nimport NFTContext from \"../NFTContext\";\nimport \"./WalletAccount.css\";\n\nconst provider = new ethers.providers.JsonRpcProvider(\n  `https://mainnet.infura.io/v3/${process.env.REACT_APP_WALLETCONNECTION_PROJECT_ID}`\n);\n\nconst truncate = (input, len) =>\n  input.length >= len * 2 + 2 ? `${input.substring(0, len + 2)}...${input.substr(input.length - len)}` : input;\n\n// https://codesandbox.io/s/react-ens-resolver-r76qox?file=/src/App.js\nconst useENS = () => {\n  const [names, setNames] = useState({});\n\n  const getName = async (addr) => {\n    if (names[addr]) return names[addr];\n\n    console.log(\"fetching address.. \");\n    let resolvedName = provider.lookupAddress(addr);\n    setNames((prev) => ({ ...prev, [addr]: resolvedName ?? addr }));\n    return resolvedName ?? addr;\n  };\n\n  return {\n    names,\n    getName,\n  };\n};\n\nexport default function WalletAccount() {\n  const { account } = useContext(NFTContext);\n  const { getName } = useENS();\n\n  const [name, setName] = useState(\"\");\n\n  useEffect(() => {\n    const showAccount = async () => {\n      if (account) {\n        setName(truncate(account, 4));\n        const nameOrAddress = await getName(account);\n        console.log(nameOrAddress);\n        if (nameOrAddress && nameOrAddress.length === 42 && nameOrAddress.startsWith(\"0x\")) {\n          setName(truncate(account, 4));\n        } else {\n          setName(nameOrAddress);\n        }\n      } else {\n        setName(\"\");\n      }\n    };\n\n    showAccount();\n  // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [account]);\n\n  return <div className='wallet-acc'>{name}</div>;\n}\n","import WalletAccount from './WalletAccount';\n\nexport default WalletAccount;\n","import Status from './Status';\n\nexport default Status;\n","import React from 'react';\nimport './Status.css';\n\nexport default function Status(props) {\n  return <div className='status'>{props.statusMsg}</div>;\n}\n","import VendingMachine from './VendingMachine';\n\nexport default VendingMachine;\n","import React, { useEffect, useState, useContext } from \"react\";\nimport { ethers } from \"ethers\";\nimport NFTContext from \"../../NFTContext\";\nimport { PageName } from \"../../../App\";\nimport \"./VendingMachine.css\";\n\nexport default function VendingMachine(props) {\n  //! is busy\n  const [isBusy, setIsBusy] = useState(false);\n\n  //! quantity\n  const MIN_QUALITY = 1;\n  const [quantity, setQuantity] = useState(MIN_QUALITY);\n\n  //! web3 APIs\n  const {\n    //! read only\n    contractAddress,\n    contractAbi,\n    openseaColletionName,\n    isTestnet,\n    //! utils\n    parseEtherError,\n    checkAndSwitchNetwork,\n    //! load from contract\n    price,\n    setPrice,\n    maxSupply,\n    setMaxSupply,\n    maxFreeSupply,\n    setMaxFreeSupply,\n    totalSupply,\n    setTotalSupply,\n    maxPerTxDuringMint,\n    setMaxPerTxDuringMint,\n    maxPerAddressDuringFreeMint,\n    setMaxPerAddressDuringFreeMint,\n    //! current page\n    setCurrPage,\n    //! wallet\n    account,\n    //! status\n    updateStatus,\n  } = useContext(NFTContext);\n\n  useEffect(() => {\n    const loadMintInfo = async () => {\n      const { ethereum } = window;\n      if (!ethereum) {\n        updateStatus(\"Please install MetaMask.\");\n        return;\n      }\n\n      if (!account) {\n        updateStatus(\"Please connect wallet first\");\n        return;\n      }\n\n      updateStatus(contractAddress);\n      if (!contractAddress || contractAddress === \"\") {\n        updateStatus(\"Contract is not available\");\n        return;\n      }\n\n      try {\n        const provider = new ethers.providers.Web3Provider(ethereum);\n        const signer = provider.getSigner();\n        const nftContract = new ethers.Contract(contractAddress, contractAbi, signer);\n\n        updateStatus(\"Loading mint contract info...\");\n\n        let maxSupplyNum = await nftContract.maxSupply();\n        setMaxSupply(maxSupplyNum.toNumber());\n        let maxFreeSupplyNum = await nftContract.maxFreeSupply();\n        setMaxFreeSupply(maxFreeSupplyNum.toNumber());\n        let totalSupplyNum = await nftContract.totalSupply();\n        setTotalSupply(totalSupplyNum.toNumber());\n        let maxPerTxDuringMintNum = await nftContract.maxPerTxDuringMint();\n        setMaxPerTxDuringMint(maxPerTxDuringMintNum.toNumber());\n        let maxPerAddressDuringFreeMintNum = await nftContract.maxPerAddressDuringFreeMint();\n        setMaxPerAddressDuringFreeMint(maxPerAddressDuringFreeMintNum.toNumber());\n\n        //* mint price\n        if (totalSupply < maxFreeSupply) {\n          //* free mint\n          setPrice(0);\n        } else {\n          //* public sales\n          let priceWei = await nftContract.cost();\n          setPrice(ethers.utils.formatEther(priceWei));\n        }\n\n        updateStatus(\"Mint contract info loaded\");\n      } catch (err) {\n        const errMsg = parseEtherError(err);\n        updateStatus(errMsg);\n      }\n    };\n\n    loadMintInfo();\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [account]);\n\n  //! mint quantity\n  const add = () => {\n    updateMintQuantity(quantity + 1);\n  };\n\n  const sub = () => {\n    updateMintQuantity(quantity - 1);\n  };\n\n  const updateMintQuantity = (quan) => {\n    if (quan && price > -1) {\n      if (totalSupply < maxFreeSupply) {\n        //* free mint\n        quan = Math.min(maxPerAddressDuringFreeMint, Math.max(MIN_QUALITY, quan));\n      } else {\n        //* public sales\n        quan = Math.min(maxPerTxDuringMint, Math.max(MIN_QUALITY, quan));\n      }\n      setQuantity(quan);\n    }\n  };\n\n  //! total supply\n  useEffect(() => {\n    const updateTotalSupply = async () => {\n      const { ethereum } = window;\n      if (!ethereum) {\n        updateStatus(\"Please install MetaMask.\");\n        return;\n      }\n      if (!account) {\n        return;\n      }\n      if (!contractAddress || contractAddress === \"\") {\n        return;\n      }\n      try {\n        //* check network\n        await checkAndSwitchNetwork(isTestnet, updateStatus);\n\n        const provider = new ethers.providers.Web3Provider(ethereum);\n        const signer = provider.getSigner();\n        const nftContract = new ethers.Contract(contractAddress, contractAbi, signer);\n\n        let totalSupplyNum = await nftContract.totalSupply();\n        setTotalSupply(totalSupplyNum.toNumber());\n\n        //* mint price\n        if (totalSupply < maxFreeSupply) {\n          setPrice(0);\n        } else {\n          let priceWei = await nftContract.cost();\n          setPrice(ethers.utils.formatEther(priceWei));\n        }\n      } catch (err) {\n        const errMsg = parseEtherError(err);\n        updateStatus(errMsg);\n      }\n    };\n\n    const timerId = setInterval(() => {\n      updateTotalSupply();\n    }, 500);\n\n    return () => clearInterval(timerId);\n  });\n\n  //! mint NFTs\n  const mintNftHandler = async () => {\n    if (totalSupply >= maxSupply) {\n      alert(\n        `Thank you for your interest. \\nGohan-kun is sold out. \\nPlease check https://opensea.io/collection/gohan-kun.`\n      );\n      window.open(`https://${isTestnet ? \"testnets.\" : \"\"}opensea.io/collection/${openseaColletionName}`);\n      return;\n    }\n\n    const { ethereum } = window;\n    if (!ethereum) {\n      updateStatus(\"Please install MetaMask.\");\n      return;\n    }\n    if (!account) {\n      updateStatus(\"Please connect wallet first\");\n      props.connectWallet();\n      return;\n    }\n    if (isBusy) {\n      updateStatus(\"Busy... please wait\");\n      return;\n    }\n    if (!contractAddress || contractAddress === \"\") {\n      updateStatus(\"Contract is not available\");\n      return;\n    }\n    if (price < -1) {\n      updateStatus(\"Load contract info first\");\n      return;\n    }\n    try {\n      //* check network\n      await checkAndSwitchNetwork(isTestnet, updateStatus);\n\n      const provider = new ethers.providers.Web3Provider(ethereum);\n      const signer = provider.getSigner();\n      const nftContract = new ethers.Contract(contractAddress, contractAbi, signer);\n\n      updateStatus(\"Initialize minting...\");\n      setIsBusy(true);\n\n      let nftTxn;\n      if (totalSupply < maxFreeSupply) {\n        //* free mint\n        nftTxn = await nftContract.freeMint(quantity);\n      } else {\n        //* public sales\n        nftTxn = await nftContract.mint(quantity, {\n          value: ethers.utils.parseEther((price * quantity).toString()),\n        });\n      }\n\n      updateStatus(`Mint (price: ${price}, quantity: ${quantity})... please wait`);\n\n      await nftTxn.wait();\n\n      updateStatus(`Mined, see transction: https://${isTestnet ? \"rinkeby.\" : \"\"}etherscan.io/tx/${nftTxn.hash}`);\n      setIsBusy(false);\n    } catch (err) {\n      const errMsg = parseEtherError(err);\n      updateStatus(errMsg);\n      setIsBusy(false);\n    }\n  };\n\n  //! mint or buy\n  let mintOrBuy;\n  if (totalSupply !== -1 && totalSupply < maxSupply) {\n    //* mint directly\n    mintOrBuy = (\n      <div className='vending-mint'>\n        <img\n          className='vending-btn-add'\n          src={process.env.PUBLIC_URL + \"/img/btn_mint_add.png\"}\n          alt='Button of Increasing Mint Quantity'\n          onClick={add}\n        />\n        <img\n          className='vending-btn-sub'\n          src={process.env.PUBLIC_URL + \"/img/btn_mint_sub.png\"}\n          alt='Button of Decreasing Mint Quantity'\n          onClick={sub}\n        />\n        <img\n          className='vending-bg-input-frame'\n          src={process.env.PUBLIC_URL + \"/img/bg_mint_input_frame.png\"}\n          alt='Mint Quantity Input Frame'\n        />\n        <img\n          className='vending-btn-mint'\n          src={process.env.PUBLIC_URL + \"/img/btn_mint.png\"}\n          alt='Mint Quantity Input Frame'\n          onClick={mintNftHandler}\n        />\n        <div className='vending-price'>{price > 0 ? `Price: ${price} eth` : price === 0 ? \"Price: Free\" : \"\"}</div>\n        <div className='vending-supply'>\n          {price > -1 ? `Mint#: ${totalSupply} / ${totalSupply < maxFreeSupply ? maxFreeSupply : maxSupply}` : \"\"}\n        </div>\n        <div className='vending-quantity'>{price > -1 ? quantity : \"???\"}</div>\n      </div>\n    );\n  } else {\n    //* buy on opensea\n    mintOrBuy = (\n      <img\n        className='vending-btn-opensea'\n        src={process.env.PUBLIC_URL + \"/img/btn_mint_opensea.png\"}\n        alt='Buy NFTs on Opensea'\n        onClick={() => {\n          window.open(`https://${isTestnet ? \"testnets.\" : \"\"}opensea.io/collection/${openseaColletionName}`);\n        }}\n      />\n    );\n  }\n\n  return (\n    <div className='vending-machine'>\n      <img\n        className='vending-bg'\n        src={process.env.PUBLIC_URL + \"/img/bg_vending_machine.png\"}\n        alt='Vending Machine Background'\n      />\n      <img\n        className='vending-btn-to-game'\n        src={process.env.PUBLIC_URL + \"/img/btn_mint_to_game.png\"}\n        alt='Button of Vending Machine to Game'\n        onClick={() => setCurrPage(PageName.GAME)}\n      />\n      {mintOrBuy}\n    </div>\n  );\n}\n","import Mint from './Mint';\n\nexport default Mint;\n","import { useRef } from \"react\";\nimport \"./Mint.css\";\nimport VendingMachine from \"./VendingMachine\";\n\nexport default function Mint(props) {\n  const ref = useRef(null);\n\n  const handleClick = () => {\n    ref.current?.scrollIntoView({ behavior: \"smooth\" });\n  };\n\n  return (\n    <div className='mint'>\n      <img\n        className='mint-market-bg'\n        src={process.env.PUBLIC_URL + \"/img/bg_mint_market.png\"}\n        alt='Mint Market Background'\n        onClick={handleClick}\n      />\n      <div ref={ref}>\n        <VendingMachine {...props.connectWallet} />\n      </div>\n    </div>\n  );\n}\n","import React, { useState, useRef } from \"react\";\nimport \"./NFTPanel.css\";\n\nexport const NFT = (props) => {\n  const [posX, setPosX] = useState(null);\n  const selectNft = () => {\n    props.selectNft(props.metadata);\n    props.hideNftPanel();\n  };\n\n  const dragStartHandler = (e) => {\n    setPosX(e.clientX);\n    e.dataTransfer.setDragImage(e.target, 100000, 0);\n  };\n\n  const dragHandler = (e) => {\n    if (e.clientX > 0) {\n      props.scrollPanel(posX - e.clientX);\n      setPosX(e.clientX);\n    }\n    e.dataTransfer.setDragImage(e.target, 100000, 0);\n  };\n\n  return (\n    <div className='nft-item' onClick={selectNft} draggable='true' onDragStart={dragStartHandler} onDrag={dragHandler}>\n      <img\n        className='nft-item-loading'\n        src={process.env.PUBLIC_URL + \"/img/placehold_nft_loading.png\"}\n        alt='NFT Loading'\n      />\n      <img\n        className='nft-image'\n        src={`https://rpg.mypinata.cloud/ipfs/${props.metadata.image.split(\"ipfs://\")[1]}`}\n        alt={props.metadata.name}\n      />\n    </div>\n  );\n};\n\nexport default function NFTPanel(props) {\n  const container = useRef();\n  const onScrollHandler = (e) => {\n    if (e.deltaY > 0) {\n      scrollPanel(30);\n    }\n    if (e.deltaY < 0) {\n      scrollPanel(-30);\n    }\n  };\n\n  const scrollPanel = (deltaX) => {\n    container.current.scrollLeft += deltaX;\n  };\n\n  return (\n    <div className='nft-panel'>\n      <div className='nft-container' ref={container} onWheel={onScrollHandler}>\n        {props.metadata.map((mt) => {\n          const attr = {\n            metadata: mt,\n            selectNft: props.selectNft,\n            hideNftPanel: props.hideNftPanel,\n            scrollPanel,\n          };\n          return <NFT {...attr} key={`nft-metadata-${mt.dna}`} />;\n        })}\n      </div>\n    </div>\n  );\n}\n","import NFTPanel from './NFTPanel';\n\nexport default NFTPanel;\n","import Game from './Game';\n\nexport default Game;\n","import React, { useState, useEffect, useContext } from \"react\";\nimport { ethers } from \"ethers\";\nimport NFTContext from \"../NFTContext\";\nimport NFTPanel from \"./NFTPanel\";\nimport { PageName } from \"../../App\";\nimport \"./Game.css\";\n\nexport default function Game(props) {\n  const [metadata, setMetadata] = useState([]);\n  const [currMetadata, setCurrMetadata] = useState({});\n  const [showNftPanel, setShowNftPanel] = useState(false);\n  const [showNftPanelAnim, setShowNftPanelAnim] = useState(\"open\");\n  const [playing, setPlaying] = useState(false);\n\n  //! web3 API in NFTContext\n  const {\n    account,\n    contractAddress,\n    contractAbi,\n    parseEtherError,\n    checkAndSwitchNetwork,\n    isTestnet,\n    updateStatus,\n    setCurrPage,\n  } = useContext(NFTContext);\n\n  //! load NFTs\n  const loadNft = async () => {\n    const { ethereum } = window;\n    if (!ethereum) {\n      updateStatus(\"Please install MetaMask.\");\n      return;\n    }\n    try {\n      //* check network\n      await checkAndSwitchNetwork(isTestnet, updateStatus);\n\n      updateStatus(contractAddress);\n      if (!contractAddress || contractAddress === \"\") {\n        updateStatus(\"Contract is not available\");\n        return;\n      }\n\n      // clean metadata\n      setCurrMetadata({});\n\n      const provider = new ethers.providers.Web3Provider(ethereum);\n      const signer = provider.getSigner();\n      const nftContract = new ethers.Contract(\n        contractAddress,\n        contractAbi,\n        signer\n      );\n\n      updateStatus(\"Loading NFTs from blockchain...\");\n\n      let nfts = await nftContract.walletOfOwner(account);\n\n      const meta = [];\n      if (nfts.length > 0) {\n        //* show selected switch nft\n        updateStatus(\n          `You have ${nfts.length} ${\n            nfts.length > 1 ? \"NFTs\" : \"NFT\"\n          }. Loading metadata...`\n        );\n        for (const bg of nfts) {\n          const nftIdx = bg.toNumber();\n          nftContract.tokenURI(nftIdx).then((tokenMetadataURI) => {\n            if (tokenMetadataURI.startsWith(\"ipfs://\")) {\n              tokenMetadataURI = `https://rpg.mypinata.cloud/ipfs/${\n                tokenMetadataURI.split(\"ipfs://\")[1]\n              }`;\n            }\n            // console.log(tokenMetadataURI);\n            fetch(tokenMetadataURI)\n              .then((response) => response.json())\n              .then((tokenMetadata) => {\n                // console.log(tokenMetadata);\n                meta.push(tokenMetadata);\n                setMetadata([...meta]);\n                updateStatus(\n                  `You have ${nfts.length} ${\n                    nfts.length > 1 ? \"NFTs\" : \"NFT\"\n                  }. ${meta.length} / ${nfts.length} loaded. ${\n                    metadata.length === nfts.length\n                      ? \"Select your favor NFT and play.\"\n                      : \"\"\n                  }`\n                );\n              })\n              .catch((err) => {\n                const errMsg = parseEtherError(err);\n                updateStatus(errMsg);\n              });\n          });\n        }\n      } else {\n        //* you don't have any RPG404 nfts, please mint or buy on opensea.io\n        updateStatus(\n          `You don't have any RPG404 NFTs. Please mint or buy on opensea.io`\n        );\n      }\n    } catch (err) {\n      const errMsg = parseEtherError(err);\n      updateStatus(errMsg);\n    }\n  };\n\n  //! load NFTs effect\n  useEffect(() => {\n    const { ethereum } = window;\n    if (!ethereum) {\n      return;\n    }\n\n    loadNft();\n    ethereum.on(\"accountsChanged\", loadNft);\n    return () => {\n      ethereum?.removeListener(\"accountsChanged\", loadNft);\n    };\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [account]);\n\n  //! select NFT\n  const selectNft = (selectedMetadata) => {\n    if (selectedMetadata) {\n      const newMetadata = selectedMetadata;\n      setCurrMetadata({ ...newMetadata });\n      updateStatus(`Selected NFT: ${newMetadata.name}`);\n    }\n  };\n\n  //! open NFT panel\n  const openNftPanel = () => {\n    if (account) {\n      if (metadata.length > 0) {\n        setShowNftPanelAnim(\"open\");\n        setShowNftPanel(true);\n      } else {\n        updateStatus(\"No NFT loaded\");\n        loadNft();\n      }\n    } else {\n      updateStatus(\"Please connect wallet first\");\n      props.connectWallet();\n    }\n  };\n\n  //! play game\n  const playGame = () => {\n    if (account) {\n      if (metadata.length > 0) {\n        if (currMetadata.name) {\n          //* Play Game!!\n          const elem = document.getElementById(\"godot-game\");\n          if (elem) {\n            elem.contentWindow.nftMetadata = { ...currMetadata };\n            window.nftMetadata = JSON.stringify(currMetadata);\n            setPlaying(true);\n            elem.contentWindow.startGame();\n            updateStatus(\"Game start, enjoy!\");\n          } else {\n            setPlaying(false);\n            updateStatus(\"Cannot find game :-(\");\n          }\n        } else {\n          updateStatus(\"Please select your favor NFT before playing\");\n          openNftPanel();\n        }\n      } else {\n        updateStatus(\"No NFT loaded\");\n        loadNft();\n      }\n    } else {\n      updateStatus(\"Please connect wallet first\");\n      props.connectWallet();\n    }\n  };\n\n  return (\n    <div className=\"game\">\n      <img\n        className=\"game-bg\"\n        src={process.env.PUBLIC_URL + \"/img/game_bg.png\"}\n        alt=\"Game Background\"\n      />\n      <iframe\n        id=\"godot-game\"\n        className=\"game-iframe\"\n        title=\"RPG 404\"\n        src={process.env.PUBLIC_URL + \"/game/game.html\"}\n        frameBorder=\"0\"\n        scrolling=\"no\"\n        crossOrigin=\"anonymous\"\n      />\n      {!playing && (\n        <div className=\"game-cover\">\n          <img\n            className=\"game-cover-img\"\n            src={process.env.PUBLIC_URL + \"/img/game_cover.png\"}\n            alt=\"Game Cover\"\n          />\n          {!showNftPanel && (\n            <img\n              className=\"btn-game-play btn-clickable\"\n              src={process.env.PUBLIC_URL + \"/img/btn_game_play.png\"}\n              alt=\"Play Game Button\"\n              onClick={playGame}\n            />\n          )}\n          {!showNftPanel && (\n            <img\n              className=\"btn-select-nft btn-clickable\"\n              src={process.env.PUBLIC_URL + \"/img/btn_game_select_nft.png\"}\n              alt=\"Select NFT Button\"\n              onClick={openNftPanel}\n            />\n          )}\n        </div>\n      )}\n      <img\n        className=\"btn-game-to-mint\"\n        src={process.env.PUBLIC_URL + \"/img/btn_game_to_mint.png\"}\n        alt=\"Mint Button\"\n        onClick={() => setCurrPage(PageName.MINT)}\n      />\n      {showNftPanel ? (\n        <div className={showNftPanelAnim}>\n          <NFTPanel\n            metadata={metadata}\n            selectNft={selectNft}\n            hideNftPanel={async () => {\n              setShowNftPanelAnim(\"close\");\n              await new Promise((r) => setTimeout(r, 200));\n              setShowNftPanel(false);\n            }}\n          />\n        </div>\n      ) : null}\n    </div>\n  );\n}\n","// To Hex Address\nexport const toHex = (num) => {\n  const val = Number(num);\n  return \"0x\" + val.toString(16);\n};\n\n// parse error from MetaMask\nexport const parseEtherError = (err) => {\n  let msg = \"error\";\n  if (err && err.message) {\n    console.error(err.message);\n    const errs = err.message.match(/(?:\"message\":)\".*?\"/g);\n    if (errs && errs.length > 0 && errs[0] !== \"\") {\n      msg = errs[0].replace(`\"message\":`, \"\");\n    } else {\n      msg = err.message;\n    }\n  }\n  return msg;\n};\n\nexport const truncateAddress = (address) => {\n  if (!address) return \"No Account\";\n  const match = address.match(/^(0x[a-zA-Z0-9]{2})[a-zA-Z0-9]+([a-zA-Z0-9]{2})$/);\n  if (!match) return address;\n  return `${match[1]}…${match[2]}`;\n};\n","import WalletConnect from \"@walletconnect/web3-provider\";\nimport CoinbaseWalletSDK from \"@coinbase/wallet-sdk\";\nimport Web3Modal from \"web3modal\";\n\nconst providerOptions = {\n  walletlink: {\n    package: CoinbaseWalletSDK, // Required\n    options: {\n      appName: \"RPG 404\", // Required\n      infuraId: process.env.REACT_APP_WALLETCONNECTION_PROJECT_ID, // Required unless you provide a JSON RPC url; see `rpc` below\n    },\n  },\n  walletconnect: {\n    package: WalletConnect, // required\n    options: {\n      infuraId: process.env.REACT_APP_WALLETCONNECTION_PROJECT_ID, // required\n    },\n  },\n};\n\nexport const web3Modal = new Web3Modal({\n  // cacheProvider: true, // optional\n  theme: \"dark\",\n  providerOptions,\n  disableInjectedProvider: false, // optional. For MetaMask / Brave / Opera.\n});\n","export const networkConfig = {\n  \"0x63564c40\": {\n    chainId: \"0x63564c40\",\n    rpcUrls: [\"https://api.harmony.one\"],\n    chainName: \"Harmony Mainnet\",\n    nativeCurrency: { name: \"ONE\", decimals: 18, symbol: \"ONE\" },\n    blockExplorerUrls: [\"https://explorer.harmony.one\"],\n    iconUrls: [\"https://harmonynews.one/wp-content/uploads/2019/11/slfdjs.png\"],\n  },\n  \"0xa4ec\": {\n    chainId: \"0xa4ec\",\n    rpcUrls: [\"https://forno.celo.org\"],\n    chainName: \"Celo Mainnet\",\n    nativeCurrency: { name: \"CELO\", decimals: 18, symbol: \"CELO\" },\n    blockExplorerUrl: [\"https://explorer.celo.org\"],\n    iconUrls: [\"https://celo.org/images/marketplace-icons/icon-celo-CELO-color-f.svg\"],\n  },\n};\n","import { useState, useEffect, useContext, useMemo, useCallback } from \"react\";\nimport { ethers } from \"ethers\";\nimport Navbar from \"./components/Navbar\";\nimport WalletAccount from \"./components/WalletAccount\";\nimport Status from \"./components/Status\";\nimport Mint from \"./components/Mint\";\nimport Game from \"./components/Game\";\nimport NFTContext from \"./components/NFTContext\";\nimport { toHex, parseEtherError } from \"./utils/utils\";\nimport { web3Modal } from \"./web3/web3provider\";\nimport { networkConfig } from \"./web3/networks\";\nimport \"./App.css\";\n\n//! as Enum\nexport const PageName = {\n  GAME: \"game\",\n  MINT: \"mint\",\n};\n\nfunction App() {\n  //! read only\n  const { contractAddress, contractAbi, openseaColletionName, isTestnet } = useContext(NFTContext);\n  //! load from contract\n  const [price, setPrice] = useState(0);\n  const [maxSupply, setMaxSupply] = useState(0);\n  const [totalSupply, setTotalSupply] = useState(0);\n  const [maxFreeSupply, setMaxFreeSupply] = useState(0);\n  const [maxPerTxDuringMint, setMaxPerTxDuringMint] = useState(0);\n  const [maxPerAddressDuringFreeMint, setMaxPerAddressDuringFreeMint] = useState(0);\n\n  //! page\n  const [currPage, setCurrPage] = useState(PageName.GAME);\n  //! wallet\n  const [provider, setProvider] = useState();\n  const [library, setLibrary] = useState();\n  const [chainId, setChainId] = useState();\n  const [account, setAccount] = useState();\n  //! status\n  const [statusMsg, setStatusMsg] = useState(\"\");\n\n  const updateStatus = (msg) => {\n    console.log(msg);\n    setStatusMsg(`Status: ${msg}`);\n  };\n\n  const connectWallet = useCallback(async () => {\n    try {\n      const provider = await web3Modal.connect();\n      const library = new ethers.providers.Web3Provider(provider);\n      const accounts = await library.listAccounts();\n      const network = await library.getNetwork();\n      setProvider(provider);\n      setLibrary(library);\n      if (accounts) setAccount(accounts[0]);\n      setChainId(network.chainId);\n      await web3Modal.toggleModal();\n    } catch (err) {\n      updateStatus(err);\n    }\n  }, []);\n\n  const switchNetwork = useCallback(\n    async (network) => {\n      try {\n        await library.provider.request({\n          method: \"wallet_switchEthereumChain\",\n          params: [{ chainId: toHex(network) }],\n        });\n      } catch (switchError) {\n        if (switchError.code === 4902) {\n          try {\n            await library.provider.request({\n              method: \"wallet_addEthereumChain\",\n              params: [networkConfig[toHex(network)]],\n            });\n          } catch (err) {\n            updateStatus(err);\n          }\n        }\n      }\n    },\n    [library]\n  );\n\n  // check network\n  const checkAndSwitchNetwork = useCallback(\n    async (testnet, funcLog) => {\n      if (!provider) {\n        updateStatus(\"Please connect wallet first.\");\n        throw new Error(\"Please connect wallet first.\");\n      }\n      if (testnet && chainId !== 4) {\n        //* testnet testnet\n        funcLog(`Please change network to testnet`);\n        switchNetwork(\"4\");\n      }\n      if (!testnet && chainId !== 1) {\n        //* main network\n        funcLog(`Please change network to Ethereum Mainnet`);\n        switchNetwork(\"1\");\n      }\n    },\n    [chainId, provider, switchNetwork]\n  );\n\n  const refreshState = () => {\n    setAccount();\n    setChainId();\n  };\n\n  const disconnect = useCallback(async () => {\n    await web3Modal.clearCachedProvider();\n    refreshState();\n  }, []);\n\n  useEffect(() => {\n    if (provider?.on) {\n      const handleAccountsChanged = (...args) => {\n        const accounts = args[0];\n        if (accounts.length === 0) {\n          updateStatus(\"No authorized account found\");\n        } else if (accounts[0] !== account) {\n          const account = accounts[0];\n          setAccount(account);\n          updateStatus(`Connected (address: ${account})`);\n        }\n      };\n\n      const handleChainChanged = (_hexChainId) => {\n        setChainId(_hexChainId);\n      };\n\n      const handleDisconnect = (err) => {\n        console.log(\"disconnect\", err);\n        disconnect();\n      };\n\n      provider.on(\"accountsChanged\", handleAccountsChanged);\n      provider.on(\"chainChanged\", handleChainChanged);\n      provider.on(\"disconnect\", handleDisconnect);\n\n      return () => {\n        if (provider.removeListener) {\n          provider.removeListener(\"accountsChanged\", handleAccountsChanged);\n          provider.removeListener(\"chainChanged\", handleChainChanged);\n          provider.removeListener(\"disconnect\", handleDisconnect);\n        }\n      };\n    }\n  }, [account, disconnect, provider]);\n\n  const ctxValue = useMemo(\n    () => ({\n      //! read only\n      contractAddress,\n      contractAbi,\n      openseaColletionName,\n      isTestnet,\n      //! utils\n      parseEtherError,\n      //! load from contract\n      price,\n      setPrice,\n      maxSupply,\n      setMaxSupply,\n      maxFreeSupply,\n      setMaxFreeSupply,\n      totalSupply,\n      setTotalSupply,\n      maxPerTxDuringMint,\n      setMaxPerTxDuringMint,\n      maxPerAddressDuringFreeMint,\n      setMaxPerAddressDuringFreeMint,\n      //! current page\n      currPage,\n      setCurrPage,\n      //! wallet\n      provider,\n      library,\n      chainId,\n      account,\n      checkAndSwitchNetwork,\n      //! status\n      statusMsg,\n      updateStatus,\n    }),\n    [\n      contractAbi,\n      contractAddress,\n      currPage,\n      provider,\n      library,\n      chainId,\n      account,\n      checkAndSwitchNetwork,\n      isTestnet,\n      maxFreeSupply,\n      maxPerAddressDuringFreeMint,\n      maxPerTxDuringMint,\n      maxSupply,\n      openseaColletionName,\n      price,\n      statusMsg,\n      totalSupply,\n    ]\n  );\n\n  //! reture\n  return (\n    <NFTContext.Provider value={ctxValue}>\n      <div className=\"App\">\n        <Navbar {...{ connectWallet }} />\n        {currPage === PageName.GAME && <Game {...{ connectWallet }} />}\n        {currPage === PageName.MINT && <Mint {...{ connectWallet }} />}\n        <WalletAccount />\n        <Status statusMsg={statusMsg} />\n      </div>\n    </NFTContext.Provider>\n  );\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom/client';\nimport './index.css';\nimport App from './App';\n\nconst root = ReactDOM.createRoot(document.getElementById('root'));\nroot.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>\n);\n"],"sourceRoot":""}