{"version":3,"sources":["components/NFTContext/index.js","components/NFTContext/NFTContext.js","components/Navbar/SocialLinks/SocialLinks.js","components/Navbar/SocialLinks/index.js","components/Navbar/Logo/index.js","components/Navbar/Logo/Logo.js","components/Navbar/index.js","components/Navbar/Navbar.js","components/WalletAccount/WalletAccount.js","components/WalletAccount/index.js","components/Status/index.js","components/Status/Status.js","components/Mint/VendingMachine/index.js","components/Mint/VendingMachine/VendingMachine.js","components/Mint/index.js","components/Mint/Mint.js","components/Game/NFTPanel/NFTItem.js","components/Game/NFTPanel/index.js","components/Game/NFTPanel/NFTPanel.js","components/Game/NFTDetail/index.js","components/Game/NFTDetail/NFTDetail.js","components/Game/Game.js","components/Game/index.js","utils/utils.js","web3/web3provider.js","web3/networks.js","App.js","index.js"],"names":["NFTContext","createContext","contractAddress","contractAbi","contract","abi","openseaColletionName","isTestnet","parseEtherError","price","setPrice","maxSupply","setMaxSupply","maxFreeSupply","setMaxFreeSupply","totalSupply","setTotalSupply","maxPerTxDuringMint","setMaxPerTxDuringMint","maxPerAddressDuringFreeMint","setMaxPerAddressDuringFreeMint","currPage","setCurrPage","provider","library","chainId","account","checkAndSwitchNetwork","statusMsg","updateStatus","SocialLink","props","image","useRef","className","onMouseEnter","current","src","process","iconHover","onMouseLeave","iconNormal","onClick","ref","alt","SocialLinks","useContext","links","window","open","connectWallet","map","sl","key","Logo","Navbar","ethers","providers","JsonRpcProvider","truncate","input","len","length","substring","substr","WalletAccount","useState","names","setNames","getName","addr","console","log","resolvedName","lookupAddress","prev","useENS","name","setName","useEffect","showAccount","nameOrAddress","startsWith","Status","VendingMachine","isBusy","setIsBusy","quantity","setQuantity","loadMintInfo","signer","getSigner","nftContract","Contract","maxSupplyNum","toNumber","maxFreeSupplyNum","totalSupplyNum","maxPerTxDuringMintNum","maxPerAddressDuringFreeMintNum","cost","priceWei","utils","formatEther","errMsg","updateMintQuantity","quan","Math","min","max","updateTotalSupply","timerId","setInterval","clearInterval","mintOrBuy","mintNftHandler","alert","freeMint","nftTxn","mint","value","parseEther","toString","wait","hash","PageName","GAME","Mint","scrollIntoView","behavior","NFTItem","posX","setPosX","hoverNft","setNftDetail","metadata","unhoverNft","selectNft","hideNftPanel","onMouseOver","onMouseOut","onTouchStart","onTouchEnd","onTouchCancel","draggable","onDragStart","e","clientX","dataTransfer","setDragImage","target","onDrag","scrollPanel","split","NFTPanel","container","deltaX","scrollLeft","onWheel","deltaY","mt","attr","dna","NFTDetail","attributes","trait_type","showAttr","getWindowDimensions","width","innerWidth","height","innerHeight","Game","setMetadata","currMetadata","setCurrMetadata","showNftPanel","setShowNftPanel","showNftPanelAnim","setShowNftPanelAnim","playing","setPlaying","nftDetail","guideMsg","setGuideMsg","rotated","setRotated","isMoblie","useMediaQuery","query","windowDimensions","setWindowDimensions","handleResize","addEventListener","removeEventListener","useWindowDimensions","loadNft","walletOfOwner","nfts","meta","bg","nftIdx","tokenURI","then","tokenMetadataURI","fetch","response","json","tokenMetadata","push","catch","err","on","removeListener","showGuild","msg","hideGuild","openNftPanel","id","title","frameBorder","scrolling","crossOrigin","style","zoom","left","elem","document","getElementById","contentWindow","nftMetadata","JSON","stringify","startGame","MINT","selectedMetadata","newMetadata","Promise","r","setTimeout","toHex","num","Number","message","error","errs","match","replace","providerOptions","walletlink","package","CoinbaseWalletSDK","options","appName","infuraId","walletconnect","WalletConnect","web3Modal","Web3Modal","theme","disableInjectedProvider","networkConfig","rpcUrls","chainName","nativeCurrency","decimals","symbol","blockExplorerUrls","iconUrls","blockExplorerUrl","App","setProvider","setLibrary","setChainId","setAccount","setStatusMsg","useCallback","connect","Web3Provider","listAccounts","accounts","getNetwork","network","toggleModal","switchNetwork","request","method","params","code","testnet","funcLog","Error","disconnect","clearCachedProvider","handleAccountsChanged","handleChainChanged","_hexChainId","handleDisconnect","ctxValue","useMemo","Provider","ReactDOM","createRoot","render","StrictMode"],"mappings":"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","file":"static/js/main.2fb614a7.chunk.js","sourcesContent":["import { NFTContext } from './NFTContext';\n\nexport default NFTContext;\n","import { createContext } from \"react\";\nimport contract from \"../../contracts/RPG404.json\";\n\nexport const NFTContext = createContext({\n  //! read only\n  contractAddress: \"0xc21dCcA393Fe26D585db6598533b655816A87543\",\n  contractAbi: contract.abi,\n  openseaColletionName: \"rpg-404\",\n  isTestnet: false,\n  //! utils, read only\n  parseEtherError: () => {},\n  //! load from contract\n  price: -1,\n  setPrice: () => {},\n  maxSupply: -1,\n  setMaxSupply: () => {},\n  maxFreeSupply: -1,\n  setMaxFreeSupply: () => {},\n  totalSupply: -1,\n  setTotalSupply: () => {},\n  maxPerTxDuringMint: -1,\n  setMaxPerTxDuringMint: () => {},\n  maxPerAddressDuringFreeMint: -1,\n  setMaxPerAddressDuringFreeMint: () => {},\n  //! current page\n  currPage: null,\n  setCurrPage: () => {},\n  //! wallet\n  provider: null,\n  library: null,\n  chainId: null,\n  account: null,\n  checkAndSwitchNetwork: () => {},\n  //! status\n  statusMsg: \"\",\n  updateStatus: () => {},\n});\n","import React, { useRef, useContext } from 'react';\nimport NFTContext from '../../NFTContext';\nimport './SocialLinks.css';\n\nconst SocialLink = (props) => {\n  const image = useRef();\n  return (\n    <div\n      className='social-icon'\n      onMouseEnter={() => {\n        image.current.src = process.env.PUBLIC_URL + props.iconHover;\n      }}\n      onMouseLeave={() => {\n        image.current.src = process.env.PUBLIC_URL + props.iconNormal;\n      }}\n      onClick={props.onClick}>\n      <img ref={image} className='social-icon-img' src={process.env.PUBLIC_URL + props.iconNormal} alt={props.alt} />\n    </div>\n  );\n};\n\nexport default function SocialLinks(props) {\n  const { contractAddress, openseaColletionName, isTestnet } = useContext(NFTContext);\n\n  const links = [\n    {\n      ref: null,\n      iconNormal: '/img/social/icon_twitter.png',\n      iconHover: '/img/social/icon_twitter_hover.png',\n      alt: 'Twitter',\n      onClick: () => {\n        window.open('https://twitter.com/intent/follow?screen_name=rug_pull_games');\n      },\n    },\n    // {\n    //   ref: null,\n    //   iconNormal: '/img/social/icon_discord.png',\n    //   iconHover: '/img/social/icon_discord_hover.png',\n    //   alt: 'Discord',\n    //   onClick: () => {\n    //     window.open('https://discord.com/');\n    //   },\n    // },\n    {\n      ref: null,\n      iconNormal: '/img/social/icon_opensea.png',\n      iconHover: '/img/social/icon_opensea_hover.png',\n      alt: 'Opensea',\n      onClick: () => {\n        window.open(`https://${isTestnet ? 'testnets.' : ''}opensea.io/collection/${openseaColletionName}`);\n      },\n    },\n    {\n      ref: null,\n      iconNormal: '/img/social/icon_etherscan.png',\n      iconHover: '/img/social/icon_etherscan_hover.png',\n      alt: 'Etherscan',\n      onClick: () => {\n        window.open(`https://${isTestnet ? 'rinkeby.' : ''}etherscan.io/address/${contractAddress}`);\n      },\n    },\n    {\n      ref: null,\n      iconNormal: '/img/social/icon_metamask.png',\n      iconHover: '/img/social/icon_metamask_hover.png',\n      alt: 'MetaMask',\n      onClick: () => {\n        props.connectWallet();\n      },\n    },\n  ];\n\n  return (\n    <div className='social-links'>\n      {links.map((sl) => {\n        return <SocialLink {...sl} key={`social-icon-${sl.alt}`} />;\n      })}\n    </div>\n  );\n}\n","import SocialLinks from './SocialLinks';\n\nexport default SocialLinks;\n","import Logo from './Logo';\n\nexport default Logo;\n","import React from 'react';\nimport './Logo.css';\n\nexport default function Logo() {\n  return (\n    <div className='logo'>\n      <img\n        className='logo-rpg-icon'\n        src={process.env.PUBLIC_URL + '/img/icon_rug_pull_games_logo_lg.png'}\n        alt='Twitter'\n        onClick={() => window.open('https://rug-pull.games', '_blank')}\n      />\n      <img className='logo-rpg-404-icon' src={process.env.PUBLIC_URL + '/img/icon_rpg_404.png'} alt='Discord' />\n    </div>\n  );\n}\n","import Navbar from './Navbar';\n\nexport default Navbar;\n","import React from \"react\";\nimport SocialLinks from \"./SocialLinks\";\nimport Logo from \"./Logo\";\nimport \"./Navbar.css\";\n\nexport default function Navbar(props) {\n  return (\n    <div className='navbar'>\n      <Logo />\n      <SocialLinks connectWallet={props.connectWallet} />\n    </div>\n  );\n}\n","import { useContext, useEffect, useState } from \"react\";\nimport { ethers } from \"ethers\";\nimport NFTContext from \"../NFTContext\";\nimport \"./WalletAccount.css\";\n\nconst provider = new ethers.providers.JsonRpcProvider(\n  `https://mainnet.infura.io/v3/${process.env.REACT_APP_WALLETCONNECTION_PROJECT_ID}`\n);\n\nconst truncate = (input, len) =>\n  input.length >= len * 2 + 2 ? `${input.substring(0, len + 2)}...${input.substr(input.length - len)}` : input;\n\n// https://codesandbox.io/s/react-ens-resolver-r76qox?file=/src/App.js\nconst useENS = () => {\n  const [names, setNames] = useState({});\n\n  const getName = async (addr) => {\n    if (names[addr]) return names[addr];\n\n    console.log(\"fetching address.. \");\n    let resolvedName = provider.lookupAddress(addr);\n    setNames((prev) => ({ ...prev, [addr]: resolvedName ?? addr }));\n    return resolvedName ?? addr;\n  };\n\n  return {\n    names,\n    getName,\n  };\n};\n\nexport default function WalletAccount() {\n  const { account } = useContext(NFTContext);\n  const { getName } = useENS();\n\n  const [name, setName] = useState(\"\");\n\n  useEffect(() => {\n    const showAccount = async () => {\n      if (account) {\n        setName(truncate(account, 4));\n        const nameOrAddress = await getName(account);\n        if (!nameOrAddress || (nameOrAddress && nameOrAddress.length === 42 && nameOrAddress.startsWith(\"0x\"))) {\n          setName(truncate(account, 4));\n        } else {\n          setName(nameOrAddress);\n        }\n      } else {\n        setName(\"\");\n      }\n    };\n\n    showAccount();\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [account]);\n\n  return <div className=\"wallet-acc\">{name}</div>;\n}\n","import WalletAccount from './WalletAccount';\n\nexport default WalletAccount;\n","import Status from './Status';\n\nexport default Status;\n","import React from 'react';\nimport './Status.css';\n\nexport default function Status(props) {\n  return <div className='status'>{props.statusMsg}</div>;\n}\n","import VendingMachine from './VendingMachine';\n\nexport default VendingMachine;\n","import React, { useEffect, useState, useContext } from \"react\";\nimport { ethers } from \"ethers\";\nimport NFTContext from \"../../NFTContext\";\nimport { PageName } from \"../../../App\";\nimport \"./VendingMachine.css\";\n\nexport default function VendingMachine(props) {\n  //! is busy\n  const [isBusy, setIsBusy] = useState(false);\n\n  //! quantity\n  const MIN_QUALITY = 1;\n  const [quantity, setQuantity] = useState(MIN_QUALITY);\n\n  //! web3 APIs\n  const {\n    //! read only\n    contractAddress,\n    contractAbi,\n    openseaColletionName,\n    isTestnet,\n    //! utils\n    parseEtherError,\n    checkAndSwitchNetwork,\n    //! load from contract\n    price,\n    setPrice,\n    maxSupply,\n    setMaxSupply,\n    maxFreeSupply,\n    setMaxFreeSupply,\n    totalSupply,\n    setTotalSupply,\n    maxPerTxDuringMint,\n    setMaxPerTxDuringMint,\n    maxPerAddressDuringFreeMint,\n    setMaxPerAddressDuringFreeMint,\n    //! current page\n    setCurrPage,\n    //! wallet\n    account,\n    library,\n    //! status\n    updateStatus,\n  } = useContext(NFTContext);\n\n  useEffect(() => {\n    const loadMintInfo = async () => {\n      if (!account) {\n        updateStatus(\"Please connect wallet first\");\n        return;\n      }\n\n      updateStatus(contractAddress);\n      if (!contractAddress || contractAddress === \"\") {\n        updateStatus(\"Contract is not available\");\n        return;\n      }\n\n      try {\n        const signer = library.getSigner();\n        const nftContract = new ethers.Contract(contractAddress, contractAbi, signer);\n\n        updateStatus(\"Loading mint contract info...\");\n\n        let maxSupplyNum = await nftContract.maxSupply();\n        setMaxSupply(maxSupplyNum.toNumber());\n        let maxFreeSupplyNum = await nftContract.maxFreeSupply();\n        setMaxFreeSupply(maxFreeSupplyNum.toNumber());\n        let totalSupplyNum = await nftContract.totalSupply();\n        setTotalSupply(totalSupplyNum.toNumber());\n        let maxPerTxDuringMintNum = await nftContract.maxPerTxDuringMint();\n        setMaxPerTxDuringMint(maxPerTxDuringMintNum.toNumber());\n        let maxPerAddressDuringFreeMintNum = await nftContract.maxPerAddressDuringFreeMint();\n        setMaxPerAddressDuringFreeMint(maxPerAddressDuringFreeMintNum.toNumber());\n\n        //* mint price\n        if (totalSupply < maxFreeSupply) {\n          //* free mint\n          setPrice(0);\n        } else {\n          //* public sales\n          let priceWei = await nftContract.cost();\n          setPrice(ethers.utils.formatEther(priceWei));\n        }\n\n        updateStatus(\"Mint contract info loaded\");\n      } catch (err) {\n        const errMsg = parseEtherError(err);\n        updateStatus(errMsg);\n      }\n    };\n\n    loadMintInfo();\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [account]);\n\n  //! mint quantity\n  const add = () => {\n    updateMintQuantity(quantity + 1);\n  };\n\n  const sub = () => {\n    updateMintQuantity(quantity - 1);\n  };\n\n  const updateMintQuantity = (quan) => {\n    if (quan && price > -1) {\n      if (totalSupply < maxFreeSupply) {\n        //* free mint\n        quan = Math.min(maxPerAddressDuringFreeMint, Math.max(MIN_QUALITY, quan));\n      } else {\n        //* public sales\n        quan = Math.min(maxPerTxDuringMint, Math.max(MIN_QUALITY, quan));\n      }\n      setQuantity(quan);\n    }\n  };\n\n  //! total supply\n  useEffect(() => {\n    const updateTotalSupply = async () => {\n      if (!account) {\n        return;\n      }\n      if (!contractAddress || contractAddress === \"\") {\n        return;\n      }\n      try {\n        //* check network\n        await checkAndSwitchNetwork(isTestnet, updateStatus);\n\n        const signer = library.getSigner();\n        const nftContract = new ethers.Contract(contractAddress, contractAbi, signer);\n\n        let totalSupplyNum = await nftContract.totalSupply();\n        setTotalSupply(totalSupplyNum.toNumber());\n\n        //* mint price\n        if (totalSupply < maxFreeSupply) {\n          setPrice(0);\n        } else {\n          let priceWei = await nftContract.cost();\n          setPrice(ethers.utils.formatEther(priceWei));\n        }\n      } catch (err) {\n        const errMsg = parseEtherError(err);\n        updateStatus(errMsg);\n      }\n    };\n\n    const timerId = setInterval(() => {\n      updateTotalSupply();\n    }, 500);\n\n    return () => clearInterval(timerId);\n  });\n\n  //! mint NFTs\n  const mintNftHandler = async () => {\n    if (totalSupply >= maxSupply) {\n      alert(\n        `Thank you for your interest. \\nGohan-kun is sold out. \\nPlease check https://opensea.io/collection/gohan-kun.`\n      );\n      window.open(`https://${isTestnet ? \"testnets.\" : \"\"}opensea.io/collection/${openseaColletionName}`);\n      return;\n    }\n\n    if (!account) {\n      updateStatus(\"Please connect wallet first\");\n      props.connectWallet();\n      return;\n    }\n    if (isBusy) {\n      updateStatus(\"Busy... please wait\");\n      return;\n    }\n    if (!contractAddress || contractAddress === \"\") {\n      updateStatus(\"Contract is not available\");\n      return;\n    }\n    if (price < -1) {\n      updateStatus(\"Load contract info first\");\n      return;\n    }\n    try {\n      //* check network\n      await checkAndSwitchNetwork(isTestnet, updateStatus);\n\n      const signer = library.getSigner();\n      const nftContract = new ethers.Contract(contractAddress, contractAbi, signer);\n\n      updateStatus(\"Initialize minting...\");\n      setIsBusy(true);\n\n      let nftTxn;\n      if (totalSupply < maxFreeSupply) {\n        //* free mint\n        nftTxn = await nftContract.freeMint(quantity);\n      } else {\n        //* public sales\n        nftTxn = await nftContract.mint(quantity, {\n          value: ethers.utils.parseEther((price * quantity).toString()),\n        });\n      }\n\n      updateStatus(`Mint (price: ${price}, quantity: ${quantity})... please wait`);\n\n      await nftTxn.wait();\n\n      updateStatus(`Mined, see transction: https://${isTestnet ? \"rinkeby.\" : \"\"}etherscan.io/tx/${nftTxn.hash}`);\n      setIsBusy(false);\n    } catch (err) {\n      const errMsg = parseEtherError(err);\n      updateStatus(errMsg);\n      setIsBusy(false);\n    }\n  };\n\n  //! mint or buy\n  let mintOrBuy;\n  if (totalSupply !== -1 && totalSupply < maxSupply) {\n    //* mint directly\n    mintOrBuy = (\n      <div className=\"vending-mint\">\n        <img\n          className=\"vending-btn-add\"\n          src={process.env.PUBLIC_URL + \"/img/btn_mint_add.png\"}\n          alt=\"Button of Increasing Mint Quantity\"\n          onClick={add}\n        />\n        <img\n          className=\"vending-btn-sub\"\n          src={process.env.PUBLIC_URL + \"/img/btn_mint_sub.png\"}\n          alt=\"Button of Decreasing Mint Quantity\"\n          onClick={sub}\n        />\n        <img\n          className=\"vending-bg-input-frame\"\n          src={process.env.PUBLIC_URL + \"/img/bg_mint_input_frame.png\"}\n          alt=\"Mint Quantity Input Frame\"\n        />\n        <img\n          className=\"vending-btn-mint\"\n          src={process.env.PUBLIC_URL + \"/img/btn_mint.png\"}\n          alt=\"Mint Quantity Input Frame\"\n          onClick={mintNftHandler}\n        />\n        <div className=\"vending-price\">{price > 0 ? `Price: ${price} eth` : price === 0 ? \"Price: Free\" : \"\"}</div>\n        <div className=\"vending-supply\">\n          {price > -1 ? `Mint#: ${totalSupply} / ${totalSupply < maxFreeSupply ? maxFreeSupply : maxSupply}` : \"\"}\n        </div>\n        <div className=\"vending-quantity\">{price > -1 ? quantity : \"???\"}</div>\n      </div>\n    );\n  } else {\n    //* buy on opensea\n    mintOrBuy = (\n      <img\n        className=\"vending-btn-opensea\"\n        src={process.env.PUBLIC_URL + \"/img/btn_mint_opensea.png\"}\n        alt=\"Buy NFTs on Opensea\"\n        onClick={() => {\n          window.open(`https://${isTestnet ? \"testnets.\" : \"\"}opensea.io/collection/${openseaColletionName}`);\n        }}\n      />\n    );\n  }\n\n  return (\n    <div className=\"vending-machine\">\n      <img\n        className=\"vending-bg\"\n        src={process.env.PUBLIC_URL + \"/img/bg_vending_machine.png\"}\n        alt=\"Vending Machine Background\"\n      />\n      <img\n        className=\"vending-btn-to-game\"\n        src={process.env.PUBLIC_URL + \"/img/btn_mint_to_game.png\"}\n        alt=\"Button of Vending Machine to Game\"\n        onClick={() => setCurrPage(PageName.GAME)}\n      />\n      {mintOrBuy}\n    </div>\n  );\n}\n","import Mint from './Mint';\n\nexport default Mint;\n","import { useRef } from \"react\";\nimport \"./Mint.css\";\nimport VendingMachine from \"./VendingMachine\";\n\nexport default function Mint(props) {\n  const ref = useRef(null);\n\n  const handleClick = () => {\n    ref.current?.scrollIntoView({ behavior: \"smooth\" });\n  };\n\n  return (\n    <div className='mint'>\n      <img\n        className='mint-market-bg'\n        src={process.env.PUBLIC_URL + \"/img/bg_mint_market.png\"}\n        alt='Mint Market Background'\n        onClick={handleClick}\n      />\n      <div ref={ref}>\n        <VendingMachine {...props.connectWallet} />\n      </div>\n    </div>\n  );\n}\n","import React, { useState } from \"react\";\nimport \"./NFTPanel.css\";\n\nexport default function NFTItem(props) {\n  const [posX, setPosX] = useState(null);\n  const selectNft = () => {\n    props.selectNft(props.metadata);\n    props.hideNftPanel();\n  };\n\n  const hoverNft = () => {\n    props.setNftDetail(props.metadata);\n  };\n\n  const unhoverNft = () => {\n    props.setNftDetail(null);\n  };\n\n  const dragStartHandler = (e) => {\n    setPosX(e.clientX);\n    e.dataTransfer.setDragImage(e.target, 100000, 0);\n  };\n\n  const dragHandler = (e) => {\n    if (e.clientX > 0) {\n      props.scrollPanel(posX - e.clientX);\n      setPosX(e.clientX);\n    }\n    e.dataTransfer.setDragImage(e.target, 100000, 0);\n  };\n\n  return (\n    <div\n      className=\"nft-item\"\n      onClick={selectNft}\n      onMouseOver={hoverNft}\n      onMouseOut={unhoverNft}\n      onTouchStart={hoverNft}\n      onTouchEnd={unhoverNft}\n      onTouchCancel={unhoverNft}\n      draggable=\"true\"\n      onDragStart={dragStartHandler}\n      onDrag={dragHandler}\n    >\n      <img\n        className=\"nft-item-loading\"\n        src={process.env.PUBLIC_URL + \"/img/placehold_nft_loading.png\"}\n        alt=\"NFT Loading\"\n      />\n      <img\n        className=\"nft-image\"\n        src={`https://rpg.mypinata.cloud/ipfs/${props.metadata.image.split(\"ipfs://\")[1]}`}\n        alt={props.metadata.name}\n      />\n    </div>\n  );\n}\n","import NFTPanel from './NFTPanel';\n\nexport default NFTPanel;\n","import React, { useRef } from \"react\";\nimport NFTItem from \"./NFTItem\";\nimport \"./NFTPanel.css\";\n\nexport default function NFTPanel(props) {\n  const container = useRef();\n  const onScrollHandler = (e) => {\n    if (e.deltaY > 0) {\n      scrollPanel(30);\n    }\n    if (e.deltaY < 0) {\n      scrollPanel(-30);\n    }\n  };\n\n  const scrollPanel = (deltaX) => {\n    container.current.scrollLeft += deltaX;\n  };\n\n  return (\n    <div className=\"nft-panel\">\n      <div className=\"nft-container\" ref={container} onWheel={onScrollHandler}>\n        {props.metadata.map((mt) => {\n          const attr = {\n            metadata: mt,\n            selectNft: props.selectNft,\n            hideNftPanel: props.hideNftPanel,\n            setNftDetail: props.setNftDetail,\n            scrollPanel,\n          };\n          return <NFTItem {...attr} key={`nft-metadata-${mt.dna}`} />;\n        })}\n      </div>\n    </div>\n  );\n}\n","import NFTDetail from './NFTDetail';\n\nexport default NFTDetail;\n","import React from \"react\";\nimport \"./NFTDetail.css\";\n\nexport default function NFTDetail(props) {\n  const showAttr = (attr) => {\n    return (\n      <p key={`nft-metadata-attr-${attr.trait_type}`}>\n        {attr.trait_type}: {attr.value}\n      </p>\n    );\n  };\n\n  return (\n    <div className=\"nft-detail\">\n      {props.metadata && (\n        <div>\n          <p>Name: {props.metadata.name}</p>\n          {props.metadata.attributes.map((attr) => {\n            return showAttr(attr);\n          })}\n        </div>\n      )}\n    </div>\n  );\n}\n","import React, { useState, useEffect, useContext } from \"react\";\nimport { useMediaQuery } from \"react-responsive\";\nimport { ethers } from \"ethers\";\nimport NFTContext from \"../NFTContext\";\nimport NFTPanel from \"./NFTPanel\";\nimport NFTDetail from \"./NFTDetail\";\nimport { PageName } from \"../../App\";\nimport \"./Game.css\";\n\nfunction getWindowDimensions() {\n  const { innerWidth: width, innerHeight: height } = window;\n  return {\n    width,\n    height,\n  };\n}\n\nfunction useWindowDimensions() {\n  const [windowDimensions, setWindowDimensions] = useState(getWindowDimensions());\n\n  useEffect(() => {\n    function handleResize() {\n      setWindowDimensions(getWindowDimensions());\n    }\n\n    window.addEventListener(\"resize\", handleResize);\n    return () => window.removeEventListener(\"resize\", handleResize);\n  }, []);\n\n  return windowDimensions;\n}\n\nexport default function Game(props) {\n  const [metadata, setMetadata] = useState([]);\n  const [currMetadata, setCurrMetadata] = useState({});\n  const [showNftPanel, setShowNftPanel] = useState(false);\n  const [showNftPanelAnim, setShowNftPanelAnim] = useState(\"open\");\n  const [playing, setPlaying] = useState(false);\n  const [nftDetail, setNftDetail] = useState(null);\n  const [guideMsg, setGuideMsg] = useState(null);\n  const [rotated, setRotated] = useState(false);\n  const isMoblie = useMediaQuery({ query: \"(max-width: 599px)\" });\n  const { height, width } = useWindowDimensions();\n\n  //! web3 API in NFTContext\n  const {\n    provider,\n    library,\n    account,\n    contractAddress,\n    contractAbi,\n    parseEtherError,\n    checkAndSwitchNetwork,\n    isTestnet,\n    updateStatus,\n    setCurrPage,\n  } = useContext(NFTContext);\n\n  //! load NFTs\n  const loadNft = async () => {\n    try {\n      //* check network\n      await checkAndSwitchNetwork(isTestnet, updateStatus);\n\n      updateStatus(contractAddress);\n      if (!contractAddress || contractAddress === \"\") {\n        updateStatus(\"Contract is not available\");\n        return;\n      }\n\n      // clean metadata\n      setCurrMetadata({});\n\n      const signer = library.getSigner();\n      const nftContract = new ethers.Contract(contractAddress, contractAbi, signer);\n\n      updateStatus(\"Loading NFTs from blockchain...\");\n\n      let nfts = await nftContract.walletOfOwner(account);\n\n      const meta = [];\n      if (nfts.length > 0) {\n        //* show selected switch nft\n        updateStatus(`You have ${nfts.length} ${nfts.length > 1 ? \"NFTs\" : \"NFT\"}. Loading metadata...`);\n        for (const bg of nfts) {\n          const nftIdx = bg.toNumber();\n          nftContract.tokenURI(nftIdx).then((tokenMetadataURI) => {\n            if (tokenMetadataURI.startsWith(\"ipfs://\")) {\n              tokenMetadataURI = `https://rpg.mypinata.cloud/ipfs/${tokenMetadataURI.split(\"ipfs://\")[1]}`;\n            }\n            // console.log(tokenMetadataURI);\n            fetch(tokenMetadataURI)\n              .then((response) => response.json())\n              .then((tokenMetadata) => {\n                // console.log(tokenMetadata);\n                meta.push(tokenMetadata);\n                setMetadata([...meta]);\n                updateStatus(\n                  `You have ${nfts.length} ${nfts.length > 1 ? \"NFTs\" : \"NFT\"}. ${meta.length} / ${\n                    nfts.length\n                  } loaded. ${metadata.length === nfts.length ? \"Select your favor NFT and play.\" : \"\"}`\n                );\n              })\n              .catch((err) => {\n                const errMsg = parseEtherError(err);\n                updateStatus(errMsg);\n              });\n          });\n        }\n      } else {\n        //* you don't have any RPG404 nfts, please mint or buy on opensea.io\n        updateStatus(`You don't have any RPG404 NFTs. Please mint or buy on opensea.io`);\n      }\n    } catch (err) {\n      const errMsg = parseEtherError(err);\n      updateStatus(errMsg);\n    }\n  };\n\n  //! load NFTs effect\n  useEffect(() => {\n    loadNft();\n    if (provider?.on) {\n      provider.on(\"accountsChanged\", loadNft);\n      return () => {\n        provider?.removeListener(\"accountsChanged\", loadNft);\n      };\n    }\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [account, provider]);\n\n  //! select NFT\n  const selectNft = (selectedMetadata) => {\n    if (selectedMetadata) {\n      const newMetadata = selectedMetadata;\n      setCurrMetadata({ ...newMetadata });\n      updateStatus(`Selected NFT: ${newMetadata.name}`);\n    }\n  };\n\n  //! show guide\n  const showGuild = (msg) => {\n    if (msg) {\n      setGuideMsg(msg);\n    }\n  };\n\n  const hideGuild = () => {\n    setGuideMsg(null);\n  };\n\n  //! open NFT panel\n  const openNftPanel = () => {\n    if (account) {\n      if (metadata.length > 0) {\n        setShowNftPanelAnim(\"open\");\n        setShowNftPanel(true);\n      } else {\n        updateStatus(\"No NFT loaded\");\n        loadNft();\n      }\n    } else {\n      updateStatus(\"Please connect wallet first\");\n      props.connectWallet();\n    }\n  };\n\n  //! play game\n  const playGame = () => {\n    if (account) {\n      if (metadata.length > 0) {\n        if (currMetadata.name) {\n          //* Play Game!!\n          const elem = document.getElementById(\"godot-game\");\n          if (elem) {\n            elem.contentWindow.nftMetadata = { ...currMetadata };\n            window.nftMetadata = JSON.stringify(currMetadata);\n            setPlaying(true);\n            elem.contentWindow.startGame();\n            updateStatus(\"Game start, enjoy!\");\n          } else {\n            setPlaying(false);\n            updateStatus(\"Cannot find game :-(\");\n          }\n        } else {\n          updateStatus(\"Please select your favor NFT before playing\");\n          openNftPanel();\n        }\n      } else {\n        updateStatus(\"No NFT loaded\");\n        loadNft();\n      }\n    } else {\n      updateStatus(\"Please connect wallet first\");\n      props.connectWallet();\n    }\n  };\n\n  return (\n    <div className=\"game\">\n      {(!playing || !isMoblie) && (\n        <img className=\"game-bg\" src={process.env.PUBLIC_URL + \"/img/game_bg.png\"} alt=\"Game Background\" />\n      )}\n      <iframe\n        id=\"godot-game\"\n        className={`game-iframe ${playing ? \"game-iframe-show\" : \"game-iframe-hide\"} ${\n          rotated && \"game-iframe-rotate\"\n        }`}\n        title=\"RPG 404\"\n        src={process.env.PUBLIC_URL + \"/game/game.html\"}\n        frameBorder=\"0\"\n        scrolling=\"no\"\n        crossOrigin=\"anonymous\"\n        style={\n          isMoblie && rotated\n            ? {\n                zoom: (height / width) * 1,\n                left: width * -0.25,\n              }\n            : {}\n        }\n      />\n      {playing && <div className={`game-iframe-cover ${rotated && \"game-iframe-cover-rotate\"}`}></div>}\n      {!playing && (\n        <div className=\"game-cover\">\n          <img className=\"game-cover-img\" src={process.env.PUBLIC_URL + \"/img/game_cover.png\"} alt=\"Game Cover\" />\n          {!showNftPanel && (\n            <div>\n              <img\n                className=\"btn-game-play btn-clickable\"\n                src={process.env.PUBLIC_URL + \"/img/btn_game_play.png\"}\n                alt=\"Play Game Button\"\n                onClick={playGame}\n                onMouseOver={() => {\n                  showGuild(`Press \"Space\", \"Enter\", or \"Mouse Left\" to jump.`);\n                }}\n                onMouseOut={hideGuild}\n                onTouchStart={() => {\n                  showGuild(`Touch panel to jump.`);\n                }}\n                onTouchEnd={hideGuild}\n                onTouchCancel={hideGuild}\n              />\n              <img\n                className=\"btn-select-nft btn-clickable\"\n                src={process.env.PUBLIC_URL + \"/img/btn_game_select_nft.png\"}\n                alt=\"Select NFT Button\"\n                onClick={openNftPanel}\n                onMouseOver={() => {\n                  showGuild(`Select a \"RPG 404\" NFT as your player.`);\n                }}\n                onMouseOut={hideGuild}\n                onTouchStart={() => {\n                  showGuild(`Select a \"RPG 404\" NFT as your player.`);\n                }}\n                onTouchEnd={hideGuild}\n                onTouchCancel={hideGuild}\n              />\n              <div className=\"game-guide\">{guideMsg}</div>\n            </div>\n          )}\n        </div>\n      )}\n      <img\n        className=\"btn-game-to-mint\"\n        src={process.env.PUBLIC_URL + \"/img/btn_game_to_mint.png\"}\n        alt=\"Mint Button\"\n        onClick={() => setCurrPage(PageName.MINT)}\n      />\n      <img\n        className=\"btn-game-rotate\"\n        src={process.env.PUBLIC_URL + \"/img/btn_game_rotate.png\"}\n        alt=\"Game Rotate Button\"\n        onClick={() => setRotated(true)}\n      />\n      {showNftPanel ? (\n        <div>\n          <div className={showNftPanelAnim}>\n            <NFTPanel\n              metadata={metadata}\n              selectNft={selectNft}\n              setNftDetail={setNftDetail}\n              hideNftPanel={async () => {\n                setShowNftPanelAnim(\"close\");\n                await new Promise((r) => setTimeout(r, 200));\n                setShowNftPanel(false);\n              }}\n            />\n          </div>\n          <NFTDetail metadata={nftDetail} />\n        </div>\n      ) : null}\n    </div>\n  );\n}\n","import Game from './Game';\n\nexport default Game;\n","// To Hex Address\nexport const toHex = (num) => {\n  const val = Number(num);\n  return \"0x\" + val.toString(16);\n};\n\n// parse error from MetaMask\nexport const parseEtherError = (err) => {\n  let msg = \"error\";\n  if (err && err.message) {\n    console.error(err.message);\n    const errs = err.message.match(/(?:\"message\":)\".*?\"/g);\n    if (errs && errs.length > 0 && errs[0] !== \"\") {\n      msg = errs[0].replace(`\"message\":`, \"\");\n    } else {\n      msg = err.message;\n    }\n  }\n  return msg;\n};\n\nexport const truncateAddress = (address) => {\n  if (!address) return \"No Account\";\n  const match = address.match(/^(0x[a-zA-Z0-9]{2})[a-zA-Z0-9]+([a-zA-Z0-9]{2})$/);\n  if (!match) return address;\n  return `${match[1]}…${match[2]}`;\n};\n","import WalletConnect from \"@walletconnect/web3-provider\";\nimport CoinbaseWalletSDK from \"@coinbase/wallet-sdk\";\nimport Web3Modal from \"web3modal\";\n\nconst providerOptions = {\n  walletlink: {\n    package: CoinbaseWalletSDK, // Required\n    options: {\n      appName: \"RPG 404\", // Required\n      infuraId: process.env.REACT_APP_WALLETCONNECTION_PROJECT_ID, // Required unless you provide a JSON RPC url; see `rpc` below\n    },\n  },\n  walletconnect: {\n    package: WalletConnect, // required\n    options: {\n      infuraId: process.env.REACT_APP_WALLETCONNECTION_PROJECT_ID, // required\n    },\n  },\n};\n\nexport const web3Modal = new Web3Modal({\n  // cacheProvider: true, // optional\n  theme: \"dark\",\n  providerOptions,\n  disableInjectedProvider: false, // optional. For MetaMask / Brave / Opera.\n});\n","export const networkConfig = {\n  \"0x63564c40\": {\n    chainId: \"0x63564c40\",\n    rpcUrls: [\"https://api.harmony.one\"],\n    chainName: \"Harmony Mainnet\",\n    nativeCurrency: { name: \"ONE\", decimals: 18, symbol: \"ONE\" },\n    blockExplorerUrls: [\"https://explorer.harmony.one\"],\n    iconUrls: [\"https://harmonynews.one/wp-content/uploads/2019/11/slfdjs.png\"],\n  },\n  \"0xa4ec\": {\n    chainId: \"0xa4ec\",\n    rpcUrls: [\"https://forno.celo.org\"],\n    chainName: \"Celo Mainnet\",\n    nativeCurrency: { name: \"CELO\", decimals: 18, symbol: \"CELO\" },\n    blockExplorerUrl: [\"https://explorer.celo.org\"],\n    iconUrls: [\"https://celo.org/images/marketplace-icons/icon-celo-CELO-color-f.svg\"],\n  },\n};\n","import { useState, useEffect, useContext, useMemo, useCallback } from \"react\";\nimport { ethers } from \"ethers\";\nimport Navbar from \"./components/Navbar\";\nimport WalletAccount from \"./components/WalletAccount\";\nimport Status from \"./components/Status\";\nimport Mint from \"./components/Mint\";\nimport Game from \"./components/Game\";\nimport NFTContext from \"./components/NFTContext\";\nimport { toHex, parseEtherError } from \"./utils/utils\";\nimport { web3Modal } from \"./web3/web3provider\";\nimport { networkConfig } from \"./web3/networks\";\nimport \"./App.css\";\n\n//! as Enum\nexport const PageName = {\n  GAME: \"game\",\n  MINT: \"mint\",\n};\n\nfunction App() {\n  //! read only\n  const { contractAddress, contractAbi, openseaColletionName, isTestnet } = useContext(NFTContext);\n  //! load from contract\n  const [price, setPrice] = useState(0);\n  const [maxSupply, setMaxSupply] = useState(0);\n  const [totalSupply, setTotalSupply] = useState(0);\n  const [maxFreeSupply, setMaxFreeSupply] = useState(0);\n  const [maxPerTxDuringMint, setMaxPerTxDuringMint] = useState(0);\n  const [maxPerAddressDuringFreeMint, setMaxPerAddressDuringFreeMint] = useState(0);\n\n  //! page\n  const [currPage, setCurrPage] = useState(PageName.GAME);\n  //! wallet\n  const [provider, setProvider] = useState();\n  const [library, setLibrary] = useState();\n  const [chainId, setChainId] = useState();\n  const [account, setAccount] = useState();\n  //! status\n  const [statusMsg, setStatusMsg] = useState(\"\");\n\n  const updateStatus = (msg) => {\n    console.log(msg);\n    setStatusMsg(`Status: ${msg}`);\n  };\n\n  const connectWallet = useCallback(async () => {\n    try {\n      const provider = await web3Modal.connect();\n      const library = new ethers.providers.Web3Provider(provider);\n      const accounts = await library.listAccounts();\n      const network = await library.getNetwork();\n      setProvider(provider);\n      setLibrary(library);\n      if (accounts) setAccount(accounts[0]);\n      setChainId(network.chainId);\n      await web3Modal.toggleModal();\n    } catch (err) {\n      updateStatus(err);\n    }\n  }, []);\n\n  const switchNetwork = useCallback(\n    async (network) => {\n      try {\n        await library.provider.request({\n          method: \"wallet_switchEthereumChain\",\n          params: [{ chainId: toHex(network) }],\n        });\n      } catch (switchError) {\n        if (switchError.code === 4902) {\n          try {\n            await library.provider.request({\n              method: \"wallet_addEthereumChain\",\n              params: [networkConfig[toHex(network)]],\n            });\n          } catch (err) {\n            updateStatus(err);\n          }\n        }\n      }\n    },\n    [library]\n  );\n\n  // check network\n  const checkAndSwitchNetwork = useCallback(\n    async (testnet, funcLog) => {\n      if (!provider) {\n        updateStatus(\"Please connect wallet first.\");\n        throw new Error(\"Please connect wallet first.\");\n      }\n      if (testnet && chainId !== 4) {\n        //* testnet testnet\n        funcLog(`Please change network to testnet`);\n        switchNetwork(\"4\");\n      }\n      if (!testnet && chainId !== 1) {\n        //* main network\n        funcLog(`Please change network to Ethereum Mainnet`);\n        switchNetwork(\"1\");\n      }\n    },\n    [chainId, provider, switchNetwork]\n  );\n\n  const refreshState = () => {\n    setAccount();\n    setChainId();\n  };\n\n  const disconnect = useCallback(async () => {\n    await web3Modal.clearCachedProvider();\n    refreshState();\n  }, []);\n\n  useEffect(() => {\n    if (provider?.on) {\n      const handleAccountsChanged = (...args) => {\n        const accounts = args[0];\n        if (accounts.length === 0) {\n          updateStatus(\"No authorized account found\");\n        } else if (accounts[0] !== account) {\n          const account = accounts[0];\n          setAccount(account);\n          updateStatus(`Connected (address: ${account})`);\n        }\n      };\n\n      const handleChainChanged = (_hexChainId) => {\n        setChainId(_hexChainId);\n      };\n\n      const handleDisconnect = (err) => {\n        console.log(\"disconnect\", err);\n        disconnect();\n      };\n\n      provider.on(\"accountsChanged\", handleAccountsChanged);\n      provider.on(\"chainChanged\", handleChainChanged);\n      provider.on(\"disconnect\", handleDisconnect);\n\n      return () => {\n        if (provider.removeListener) {\n          provider.removeListener(\"accountsChanged\", handleAccountsChanged);\n          provider.removeListener(\"chainChanged\", handleChainChanged);\n          provider.removeListener(\"disconnect\", handleDisconnect);\n        }\n      };\n    }\n  }, [account, disconnect, provider]);\n\n  const ctxValue = useMemo(\n    () => ({\n      //! read only\n      contractAddress,\n      contractAbi,\n      openseaColletionName,\n      isTestnet,\n      //! utils\n      parseEtherError,\n      //! load from contract\n      price,\n      setPrice,\n      maxSupply,\n      setMaxSupply,\n      maxFreeSupply,\n      setMaxFreeSupply,\n      totalSupply,\n      setTotalSupply,\n      maxPerTxDuringMint,\n      setMaxPerTxDuringMint,\n      maxPerAddressDuringFreeMint,\n      setMaxPerAddressDuringFreeMint,\n      //! current page\n      currPage,\n      setCurrPage,\n      //! wallet\n      provider,\n      library,\n      chainId,\n      account,\n      checkAndSwitchNetwork,\n      //! status\n      statusMsg,\n      updateStatus,\n    }),\n    [\n      contractAbi,\n      contractAddress,\n      currPage,\n      provider,\n      library,\n      chainId,\n      account,\n      checkAndSwitchNetwork,\n      isTestnet,\n      maxFreeSupply,\n      maxPerAddressDuringFreeMint,\n      maxPerTxDuringMint,\n      maxSupply,\n      openseaColletionName,\n      price,\n      statusMsg,\n      totalSupply,\n    ]\n  );\n\n  //! reture\n  return (\n    <NFTContext.Provider value={ctxValue}>\n      <div className=\"App\">\n        <Navbar {...{ connectWallet }} />\n        {currPage === PageName.GAME && <Game {...{ connectWallet }} />}\n        {currPage === PageName.MINT && <Mint {...{ connectWallet }} />}\n        <WalletAccount />\n        <Status statusMsg={statusMsg} />\n      </div>\n    </NFTContext.Provider>\n  );\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom/client';\nimport './index.css';\nimport App from './App';\n\nconst root = ReactDOM.createRoot(document.getElementById('root'));\nroot.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>\n);\n"],"sourceRoot":""}